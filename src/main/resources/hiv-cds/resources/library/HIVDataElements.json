{
  "resourceType": "Library",
  "id": "HIVDataElements",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/nachc/hiv-cds/Library/HIVDataElements",
  "name": "HIVDataElements",
  "title": "Library - HIV Data Elements",
  "description": "A Generated Logic library encapsulating necessary concepts and data elements in relation for HIV Screening in context of the Patient.",
  "content": [ {
    "contentType": "text/cql",
    "data": "library HIVDataElements

using FHIR version '4.0.1'

include FHIRHelpers version '4.0.1'
include FHIRCommon called FC

include NACHCCommon called NC
include HIVCommon called AC
include HIVConcepts called Cx

context Patient

/*
  @dataElement: NACHC.A0.DE55 Gender Identity
  @activity: NACHC.A0 Contact & Profile
  @description: Concepts Associated with Gender Identity Elements
*/
define "Gender Identity":
  NC.MostRecent(
    [Observation: Cx."Gender Identity"] O
      where O.status in { 'final', 'amended', 'corrected' }
  ).value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.A0.DE1 Encounter Type
  @activity: NACHC.A0 Contact & Profile
  @description: The type of patient encounter
*/
define "Encounter Type":
  [Encounter: Cx."Encounter Type Codes"] E
    where E.status = 'finished'


/*
  @dataElement: NACHC.A0.DE48 Sexual Orientation
  @activity: NACHC.A0 Contact & Profile
  @description: Concepts Associated with Sexual Orientation Elements
*/
define "Sexual Orientation":
  NC.MostRecent(
    [Observation: Cx."Sexual Orientation"] O
      where O.status in { 'final', 'amended', 'corrected' }
  ).value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.A1.DE1 HIV Diagnosis
  @activity: NACHC.A1 HIV
  @description: Concepts Associated with HIV Diagnosis
*/
define "HIV Diagnosis":
  [Condition: Cx."HIV infection as a condition Codes"] C
    where C.clinicalStatus in FC."Active Condition"
      and C.verificationStatus ~ FC."confirmed"
    //return C.code


/*
  @dataElement: NACHC.A2.DE1 HIV Test
  @activity: NACHC.A2 HIV test
  @description: Concepts Associated with HIV Testing
*/
define "HIV Test":
  [Observation: Cx."HIV Test"] O
    where O.status in { 'final', 'amended', 'corrected' }
    //return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.A2.DE216 HIV Test Ordered
  @activity: NACHC.A2 HIV test
  @description: Concepts Associated with Ordering an HIV Test
*/
define "HIV Test Ordered":
  [ServiceRequest: Cx."HIV Test Ordered Codes"] SR
    where SR.status in { 'draft', 'active', 'on-hold', 'completed' }
      and SR.doNotPerform is not true
    //return SR.code


/*
  @dataElement: NACHC.B1.DE1 Hepatitis C Diagnosis
  @activity: NACHC.B1 HCV
  @description: Concepts Associated with HCV Diagnosis
*/
define "Hepatitis C Diagnosis":
  [Condition: Cx."Hepatitis C Diagnosis Codes Grouper"] C
    where C.clinicalStatus in FC."Active Condition"
      and C.verificationStatus ~ FC."confirmed"
    //return C.code


/*
  @dataElement: NACHC.B2.DE112 Hepatitis C Procedures
  @activity: NACHC.B2 HCV test
  @description: Concepts Associated with HCV Procedures
*/
define "Hepatitis C Procedures":
  [Procedure: Cx."Hepatitis C Procedures Codes"] P
    where P.status in { 'preparation', 'in-progress', 'on-hold', 'completed' }
    //return P.code


/*
  @dataElement: NACHC.B2.DE1 Hepatitis C Test
  @activity: NACHC.B2 HCV test
  @description: Concepts Associated with HCV Testing
*/
define "Hepatitis C Test":
  [Observation: Cx."Hepatitis C Test"] O
    where O.status in { 'final', 'amended', 'corrected' }
    //return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.C1.DE1 Syphilis Diagnosis
  @activity: NACHC.C1 Syphilis
  @description: Concepts Associated with Syphilis Diagnosis
*/
define "Syphilis Diagnosis":
  [Condition: Cx."Syphilis Diagnosis Codes Grouper"] C
    where C.clinicalStatus in FC."Active Condition"
      and C.verificationStatus ~ FC."confirmed"
    //return C.code


/*
  @dataElement: NACHC.C2.DE1 Syphilis Test
  @activity: NACHC.C2 Syphilis test
  @description: Concepts Associated with Syphilis Testing
*/
define "Syphilis Test":
  [Observation: Cx."Syphilis Test"] O
    where O.status in { 'final', 'amended', 'corrected' }
    //return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.D1.DE1 Gonorrhea Diagnosis
  @activity: NACHC.D1 Gonorrhea
  @description: Concepts Associated with Gonorrhea Diagnosis
*/
define "Gonorrhea Diagnosis":
  [Condition: Cx."Gonorrhea Diagnosis Codes Grouper"] C
    where C.clinicalStatus in FC."Active Condition"
      and C.verificationStatus ~ FC."confirmed"
    //return C.code


/*
  @dataElement: NACHC.D2.DE1 Gonorrhea Test
  @activity: NACHC.D2 Gonorrhea test
  @description: Concepts Associated with Gonorrhea Testing
*/
define "Gonorrhea Test":
  [Observation: Cx."Gonorrhea Test"] O
    where O.status in { 'final', 'amended', 'corrected' }
    //return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.E1.DE1 Chlamydia Diagnosis
  @activity: NACHC.E1 Chlamydia
  @description: Concepts Associated with Chlamydia Diagnosis
*/
define "Chlamydia Diagnosis":
  [Condition: Cx."Chlamydia Diagnosis Codes Grouper"] C
    where C.clinicalStatus in FC."Active Condition"
      and C.verificationStatus ~ FC."confirmed"
    //return C.code


/*
  @dataElement: NACHC.E2.DE1 Chlamydia Test
  @activity: NACHC.E2 Chlamydia test
  @description: Concepts Associated with Chlamydia Testing
*/
define "Chlamydia Test":
  [Observation: Cx."Chlamydia Test"] O
    where O.status in { 'final', 'amended', 'corrected' }
    //return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.F1.DE1 Drug Rehabilitation
  @activity: NACHC.F1 Injection Drug Use
  @description: Concepts related to Injection Drug Use Rehabiliation
*/
define "Drug Rehabilitation":
  [Procedure: Cx."Drug Rehabilitation Codes"] P
    where P.status in { 'preparation', 'in-progress', 'on-hold', 'completed' }
    //return P.code


/*
  @dataElement: NACHC.F1.DE200 Injection Drug Use
  @activity: NACHC.F1 Injection Drug Use
  @description: Concepts related to Injection Drug Use History
*/
define "Injection Drug Use":
  [MedicationStatement: Cx."Injection Drug Use Codes"]

/*
  @dataElement: NACHC.F1.DE15 Injection Drug Use Diagnosis
  @activity: NACHC.F1 Injection Drug Use
  @description: Concepts Associated with Injection Drug Use Diagnosis
*/
define "Injection Drug Use Diagnosis":
  [Condition: Cx."Injection Drug Use Diagnosis Codes"] C
    where C.clinicalStatus in FC."Active Condition"
      and C.verificationStatus ~ FC."confirmed"
    //return C.code


/*
  @dataElement: NACHC.F1.DE12 Injection Findings
  @activity: NACHC.F1 Injection Drug Use
  @description: Concepts related to findings or observations related to Injection Drug Usage
*/
define "Injection Findings":
  [Observation: Cx."Injection Findings"] O
    where O.status in { 'final', 'amended', 'corrected' }
    //return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.F2.DE108 Maternal Care
  @activity: NACHC.F2 Pregnancy
  @description: Procedures identifying Maternal Care for Pregnancy
*/
define "Maternal Care":
  [Procedure: Cx."Maternal Care Codes"] P
    where P.status in { 'preparation', 'in-progress', 'on-hold', 'completed' }
    //return P.code


/*
  @dataElement: NACHC.F2.DE1131 Pregnancy Conditions
  @activity: NACHC.F2 Pregnancy
  @description: Conditions identified for Pregnancy
*/
define "Pregnancy Conditions":
  [Condition: Cx."Pregnancy Conditions Codes"] C
    where C.clinicalStatus in FC."Active Condition"
      and C.verificationStatus ~ FC."confirmed"
    //return C.code


/*
  @dataElement: NACHC.F2.DE1 Pregnancy Encounters
  @activity: NACHC.F2 Pregnancy
  @description: Encounters in the usage of Pregnancy
*/
define "Pregnancy Encounters":
  [Encounter: Cx."Pregnancy Encounters Codes"] E
    where E.status = 'finished'
    //return E.type


/*
  @dataElement: NACHC.F2.DE904 Pregnancy Observations
  @activity: NACHC.F2 Pregnancy
  @description: Observations identified for Pregnancy
*/
define "Pregnancy Observations":
  [Observation: Cx."Pregnancy Observations Codes"] O
    where O.status in { 'final', 'amended', 'corrected' }
    //return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.F2.DE672 Pregnancy Procedures
  @activity: NACHC.F2 Pregnancy
  @description: Procedures identified for Pregnancy
*/
define "Pregnancy Procedures":
  [Procedure: Cx."Pregnancy Procedures Codes"] P
    where P.status in { 'preparation', 'in-progress', 'on-hold', 'completed' }
    //return P.code


/*
  @dataElement: NACHC.F2.DE42 Pregnancy Supervision
  @activity: NACHC.F2 Pregnancy
  @description: Procedures in the usage of the Supervision of Pregnancy
*/
define "Pregnancy Supervision":
  [Procedure: Cx."Pregnancy Supervision Codes"] P
    where P.status in { 'preparation', 'in-progress', 'on-hold', 'completed' }
    //return P.code


/*
  @dataElement: NACHC.F2.DE38 Third Trimester Encounters
  @activity: NACHC.F2 Pregnancy
  @description: Third Trimester Encounters in the usage of Pregnancy
*/
define "Third Trimester Encounters":
  [Encounter: Cx."Third Trimester Encounters Codes"] E
    where E.status = 'finished'
    //return E.type


/*
  @dataElement: NACHC.G1.DE143 PEP Dispensed Medications
  @activity: NACHC.G1 Pep
  @description: List of Medications Provisioned and Supplied for Non-Occupational Post Exposure Prophylaxis
*/
define "PEP Dispensed Medications":
  [MedicationDispense: Cx."PEP Dispensed Medications Codes Grouper"]

/*
  @dataElement: NACHC.G1.DE5 PEP Medication Prescriptions
  @activity: NACHC.G1 Pep
  @description: List of Medication Prescriptions for Non-Occupational Post Exposure Prophylaxis
*/
define "PEP Medication Prescriptions":
  [MedicationRequest: Cx."PEP Medication Prescriptions Codes Grouper"] MR
    where MR.status in { 'draft', 'active', 'on-hold', 'completed' }
      and MR.doNotPerform is not true
    //return MR.medication as FHIR.CodeableConcept


/*
  @dataElement: NACHC.G1.DE1 Post Exposure Prophylaxis
  @activity: NACHC.G1 Pep
  @description: Concepts and Procedures Identifying Post Exposure Prophylaxis
*/
define "Post Exposure Prophylaxis":
  [Procedure: Cx."Post Exposure Prophylaxis Codes"] P
    where P.status in { 'preparation', 'in-progress', 'on-hold', 'completed' }
    //return P.code


/*
  @dataElement: NACHC.G2.DE26 Prep Dispensed Medications
  @activity: NACHC.G2 Prep
  @description: List of Medications Provisioned and Supplied for Non-Occupational Pre Exposure Prophylaxis
*/
define "Prep Dispensed Medications":
  [MedicationDispense: Cx."Prep Dispensed Medications Codes Grouper"]

/*
  @dataElement: NACHC.G2.DE1 Prep Medication Prescriptions
  @activity: NACHC.G2 Prep
  @description: List of Medication Prescriptions for Non-Occupational Pre Exposure Prophylaxis
*/
define "Prep Medication Prescriptions":
  [MedicationRequest: Cx."Prep Medication Prescriptions Codes Grouper"] MR
    where MR.status in { 'draft', 'active', 'on-hold', 'completed' }
      and MR.doNotPerform is not true
    //return MR.medication as FHIR.CodeableConcept


/*
  @dataElement: NACHC.H1.DE3 Patient Currently Pregnant
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient is currently pregnant?
*/
define "Patient Currently Pregnant":
  [Observation: Cx."Patient Currently Pregnant"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE7 Patient Diagnosed with Chlamydia
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has been diagnosed with Chlamydia?
*/
define "Patient Diagnosed with Chlamydia":
  [Observation: Cx."Patient Diagnosed with Chlamydia"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE6 Patient Diagnosed with Gonorrhea
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has been diagnosed with Gonorrhea?
*/
define "Patient Diagnosed with Gonorrhea":
  [Observation: Cx."Patient Diagnosed with Gonorrhea"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE4 Patient Diagnosed with HCV
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has been diagnosed with HCV?
*/
define "Patient Diagnosed with HCV":
  [Observation: Cx."Patient Diagnosed with HCV"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE5 Patient Diagnosed with Syphilis
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has been diagnosed with Syphilis?
*/
define "Patient Diagnosed with Syphilis":
  [Observation: Cx."Patient Diagnosed with Syphilis"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE8 Patient has used Injection Drugs
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has been using Injection Drugs?
*/
define "Patient has used Injection Drugs":
  [Observation: Cx."Patient has used Injection Drugs"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE10 Previous experience with PREP
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has previously been given PREP?
*/
define "Previous experience with PREP":
  [Observation: Cx."Previous experience with PREP"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE2 Previous HIV Diagnosis
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has previously been diagnosed with HIV?
*/
define "Previous HIV Diagnosis":
  [Observation: Cx."Previous HIV Diagnosis"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE1 Previous HIV Screening
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has previously been screened for HIV?
*/
define "Previous HIV Screening":
  [Observation: Cx."Previous HIV Screening"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE9 Seeking STD Treatment
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient is currently seeking evaluation and treatment of an STD?
*/
define "Seeking STD Treatment":
  [Observation: Cx."Seeking STD Treatment"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE22 Sexual Activity - Coercion
  @activity: NACHC.H1 Risk Factors
  @description: Have you ever been coerced or pressured to have sex?
*/
define "Sexual Activity - Coercion":
  [Observation: Cx."Sexual Activity - Coercion"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE20 Sexual Activity - Drug or Alcohol Use
  @activity: NACHC.H1 Risk Factors
  @description: Have you or any of your partners used alcohol or drugs when you had sex?
*/
define "Sexual Activity - Drug or Alcohol Use":
  [Observation: Cx."Sexual Activity - Drug or Alcohol Use"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE21 Sexual Activity - Exchanged for Sex
  @activity: NACHC.H1 Risk Factors
  @description: Have you ever exchanged sex for drugs or money?
*/
define "Sexual Activity - Exchanged for Sex":
  [Observation: Cx."Sexual Activity - Exchanged for Sex"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE12 Sexual Activity - History
  @activity: NACHC.H1 Risk Factors
  @description: Have you ever been sexually active?
*/
define "Sexual Activity - History":
  [Observation: Cx."Sexual Activity - History"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE23 Sexual Activity - Kind of Sex - Anal
  @activity: NACHC.H1 Risk Factors
  @description: In the past 3 months have you had anal sex?
*/
define "Sexual Activity - Kind of Sex - Anal":
  [Observation: Cx."Sexual Activity - Kind of Sex - Anal"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE26 Sexual Activity - Kind of Sex - Vaginal
  @activity: NACHC.H1 Risk Factors
  @description: In the past 3 months have you had vaginal sex?
*/
define "Sexual Activity - Kind of Sex - Vaginal":
  [Observation: Cx."Sexual Activity - Kind of Sex - Vaginal"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE25 Sexual Activity - Male - Kind of Sex - Insertive Anal
  @activity: NACHC.H1 Risk Factors
  @description: If Male: In the past 3 months have you had insertive anal sex?
*/
define "Sexual Activity - Male - Kind of Sex - Insertive Anal":
  [Observation: Cx."Sexual Activity - Male - Kind of Sex - Insertive Anal"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE24 Sexual Activity - Male - Kind of Sex - Receptive Anal
  @activity: NACHC.H1 Risk Factors
  @description: If Male: In the past 3 months have you had receptive anal sex?
*/
define "Sexual Activity - Male - Kind of Sex - Receptive Anal":
  [Observation: Cx."Sexual Activity - Male - Kind of Sex - Receptive Anal"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE13 Sexual Activity - Men
  @activity: NACHC.H1 Risk Factors
  @description: Do you have sex with men?
*/
define "Sexual Activity - Men":
  [Observation: Cx."Sexual Activity - Men"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE16 Sexual Activity - New Partner Past 3 Months
  @activity: NACHC.H1 Risk Factors
  @description: In the past 3 months, have you had sex with someone you didn’t know or had just met?
*/
define "Sexual Activity - New Partner Past 3 Months":
  [Observation: Cx."Sexual Activity - New Partner Past 3 Months"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE15 Sexual Activity - Number of Partners
  @activity: NACHC.H1 Risk Factors
  @description: Have you had more than 1 sexual partner since last being tested for HIV?
*/
define "Sexual Activity - Number of Partners":
  [Observation: Cx."Sexual Activity - Number of Partners"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE17 Sexual Activity - Partners History
  @activity: NACHC.H1 Risk Factors
  @description: Do you know whether your partner has other sexual partners?
*/
define "Sexual Activity - Partners History":
  [Observation: Cx."Sexual Activity - Partners History"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE19 Sexual Activity - Partners HIV History
  @activity: NACHC.H1 Risk Factors
  @description: Do you know whether your partner has HIV?
*/
define "Sexual Activity - Partners HIV History":
  [Observation: Cx."Sexual Activity - Partners HIV History"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE18 Sexual Activity - Partners Number of Partners
  @activity: NACHC.H1 Risk Factors
  @description: Do you know whether your partner has had more than 1 sexual partner since their last HIV test?
*/
define "Sexual Activity - Partners Number of Partners":
  [Observation: Cx."Sexual Activity - Partners Number of Partners"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE11 Sexual Activity - Past Year
  @activity: NACHC.H1 Risk Factors
  @description: Have you been sexually active in the past year?
*/
define "Sexual Activity - Past Year":
  [Observation: Cx."Sexual Activity - Past Year"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H1.DE14 Sexual Activity - Women
  @activity: NACHC.H1 Risk Factors
  @description: Do you have sex with women?
*/
define "Sexual Activity - Women":
  [Observation: Cx."Sexual Activity - Women"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE1 DAST 10 Question 1
  @activity: NACHC.H2 DAST 10
  @description: Have you used drugs other than those required for medical reasons?
*/
define "DAST 10 Question 1":
  [Observation: Cx."DAST 10 Question 1"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE10 DAST 10 Question 10
  @activity: NACHC.H2 DAST 10
  @description: Have you had medical problems as a result of your drug use (e.g., memory loss, hepatitis, convulsions, bleeding, etc.)?
*/
define "DAST 10 Question 10":
  [Observation: Cx."DAST 10 Question 10"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE2 DAST 10 Question 2
  @activity: NACHC.H2 DAST 10
  @description: Do you use more than one drug at a time?
*/
define "DAST 10 Question 2":
  [Observation: Cx."DAST 10 Question 2"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE3 DAST 10 Question 3
  @activity: NACHC.H2 DAST 10
  @description: Are you always able to stop using drugs when you want to?
*/
define "DAST 10 Question 3":
  [Observation: Cx."DAST 10 Question 3"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE4 DAST 10 Question 4
  @activity: NACHC.H2 DAST 10
  @description: Have you had blackouts or flashbacks as a result of drug use?
*/
define "DAST 10 Question 4":
  [Observation: Cx."DAST 10 Question 4"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE5 DAST 10 Question 5
  @activity: NACHC.H2 DAST 10
  @description: Do you ever feel bad or guilty about your drug use? 
*/
define "DAST 10 Question 5":
  [Observation: Cx."DAST 10 Question 5"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE6 DAST 10 Question 6
  @activity: NACHC.H2 DAST 10
  @description: Does your spouse (or parents) ever complain about your involvement with drugs?
*/
define "DAST 10 Question 6":
  [Observation: Cx."DAST 10 Question 6"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE7 DAST 10 Question 7
  @activity: NACHC.H2 DAST 10
  @description: Have you neglected your family because of your use of drugs?
*/
define "DAST 10 Question 7":
  [Observation: Cx."DAST 10 Question 7"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE8 DAST 10 Question 8
  @activity: NACHC.H2 DAST 10
  @description: Have you engaged in illegal activities in order to obtain drugs?
*/
define "DAST 10 Question 8":
  [Observation: Cx."DAST 10 Question 8"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE9 DAST 10 Question 9
  @activity: NACHC.H2 DAST 10
  @description: Have you ever experienced withdrawal symptoms (felt sick) when you stopped taking drugs?
*/
define "DAST 10 Question 9":
  [Observation: Cx."DAST 10 Question 9"] O
    where O.status in { 'final', 'amended', 'corrected' }


/*
  @dataElement: NACHC.H2.DE11 DAST 10 Score
  @activity: NACHC.H2 DAST 10
  @description: Substance Abuse Prescription Illicit Substance Over the Counter Product Screening Test Score
*/
define "DAST 10 Score":
  [Observation: Cx."DAST 10 Score"] O
    where O.status in { 'final', 'amended', 'corrected' }
"
  }, {
    "contentType": "application/elm+xml",
    "data": "<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="urn:hl7-org:elm:r1" xmlns:t="urn:hl7-org:elm-types:r1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:fhir="http://hl7.org/fhir" xmlns:qdm43="urn:healthit-gov:qdm:v4_3" xmlns:qdm53="urn:healthit-gov:qdm:v5_3" xmlns:a="urn:hl7-org:cql-annotations:r1">
   <annotation translatorOptions="EnableAnnotations,EnableLocators,DisableListDemotion,DisableListPromotion" xsi:type="a:CqlToElmInfo"/>
   <annotation xsi:type="a:Annotation">
      <a:s r="777">
         <a:s>library HIVDataElements</a:s>
      </a:s>
   </annotation>
   <identifier id="HIVDataElements" system="http://fhir.org/guides/nachc/hiv-cds"/>
   <schemaIdentifier id="urn:hl7-org:elm" version="r1"/>
   <usings>
      <def localIdentifier="System" uri="urn:hl7-org:elm-types:r1"/>
      <def localId="1" locator="3:1-3:26" localIdentifier="FHIR" uri="http://hl7.org/fhir" version="4.0.1">
         <annotation xsi:type="a:Annotation">
            <a:s r="1">
               <a:s>using </a:s>
               <a:s>
                  <a:s>FHIR</a:s>
               </a:s>
               <a:s> version '4.0.1'</a:s>
            </a:s>
         </annotation>
      </def>
   </usings>
   <includes>
      <def localId="2" locator="5:1-5:35" localIdentifier="FHIRHelpers" path="http://fhir.org/guides/nachc/hiv-cds/FHIRHelpers" version="4.0.1">
         <annotation xsi:type="a:Annotation">
            <a:s r="2">
               <a:s>include </a:s>
               <a:s>
                  <a:s>FHIRHelpers</a:s>
               </a:s>
               <a:s> version '4.0.1'</a:s>
            </a:s>
         </annotation>
      </def>
      <def localId="3" locator="6:1-6:28" localIdentifier="FC" path="http://fhir.org/guides/nachc/hiv-cds/FHIRCommon">
         <annotation xsi:type="a:Annotation">
            <a:s r="3">
               <a:s>include </a:s>
               <a:s>
                  <a:s>FHIRCommon</a:s>
               </a:s>
               <a:s> called FC</a:s>
            </a:s>
         </annotation>
      </def>
      <def localId="4" locator="8:1-8:29" localIdentifier="NC" path="http://fhir.org/guides/nachc/hiv-cds/NACHCCommon">
         <annotation xsi:type="a:Annotation">
            <a:s r="4">
               <a:s>include </a:s>
               <a:s>
                  <a:s>NACHCCommon</a:s>
               </a:s>
               <a:s> called NC</a:s>
            </a:s>
         </annotation>
      </def>
      <def localId="5" locator="9:1-9:27" localIdentifier="AC" path="http://fhir.org/guides/nachc/hiv-cds/HIVCommon">
         <annotation xsi:type="a:Annotation">
            <a:s r="5">
               <a:s>include </a:s>
               <a:s>
                  <a:s>HIVCommon</a:s>
               </a:s>
               <a:s> called AC</a:s>
            </a:s>
         </annotation>
      </def>
      <def localId="6" locator="10:1-10:29" localIdentifier="Cx" path="http://fhir.org/guides/nachc/hiv-cds/HIVConcepts">
         <annotation xsi:type="a:Annotation">
            <a:s r="6">
               <a:s>include </a:s>
               <a:s>
                  <a:s>HIVConcepts</a:s>
               </a:s>
               <a:s> called Cx</a:s>
            </a:s>
         </annotation>
      </def>
   </includes>
   <contexts>
      <def locator="12:1-12:15" name="Patient"/>
   </contexts>
   <statements>
      <def locator="12:1-12:15" name="Patient" context="Patient">
         <expression xsi:type="SingletonFrom">
            <operand locator="12:1-12:15" dataType="fhir:Patient" templateId="http://hl7.org/fhir/StructureDefinition/Patient" xsi:type="Retrieve"/>
         </expression>
      </def>
      <def localId="22" locator="19:1-23:33" name="Gender Identity" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.A0.DE55 Gender Identity"/>
            <a:t name="activity" value="NACHC.A0 Contact &amp; Profile"/>
            <a:t name="description" value="Concepts Associated with Gender Identity Elements"/>
            <a:s r="22">
               <a:s>/*
  @dataElement: NACHC.A0.DE55 Gender Identity
  @activity: NACHC.A0 Contact &amp; Profile
  @description: Concepts Associated with Gender Identity Elements
*/
define &quot;Gender Identity&quot;:
  </a:s>
               <a:s r="21">
                  <a:s r="19">
                     <a:s r="18">
                        <a:s r="7">
                           <a:s>NC</a:s>
                        </a:s>
                        <a:s>.</a:s>
                        <a:s r="18">
                           <a:s>MostRecent(
    </a:s>
                           <a:s r="17">
                              <a:s>
                                 <a:s r="9">
                                    <a:s r="8">
                                       <a:s r="8">
                                          <a:s>[Observation: </a:s>
                                          <a:s>
                                             <a:s>Cx.&quot;Gender Identity&quot;</a:s>
                                          </a:s>
                                          <a:s>]</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> O</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>
      </a:s>
                              <a:s r="16">
                                 <a:s>where </a:s>
                                 <a:s r="16">
                                    <a:s r="11">
                                       <a:s r="10">
                                          <a:s>O</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="11">
                                          <a:s>status</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> in </a:s>
                                    <a:s r="15">
                                       <a:s>{ </a:s>
                                       <a:s r="12">
                                          <a:s>'final'</a:s>
                                       </a:s>
                                       <a:s>, </a:s>
                                       <a:s r="13">
                                          <a:s>'amended'</a:s>
                                       </a:s>
                                       <a:s>, </a:s>
                                       <a:s r="14">
                                          <a:s>'corrected'</a:s>
                                       </a:s>
                                       <a:s> }</a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
  )</a:s>
                        </a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="19">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
                  <a:s> as </a:s>
                  <a:s r="20">
                     <a:s>FHIR.CodeableConcept</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="21" locator="20:3-23:33" strict="false" xsi:type="As">
            <operand localId="19" locator="20:3-23:9" path="value" xsi:type="Property">
               <source localId="18" locator="20:3-23:3" name="MostRecent" libraryName="NC" xsi:type="FunctionRef">
                  <operand localId="17" locator="21:5-22:59" xsi:type="Query">
                     <source localId="9" locator="21:5-21:41" alias="O">
                        <expression localId="8" locator="21:5-21:39" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                           <codes xsi:type="ToList">
                              <operand locator="21:19-21:38" name="Gender Identity" libraryName="Cx" xsi:type="CodeRef"/>
                           </codes>
                        </expression>
                     </source>
                     <where localId="16" locator="22:7-22:59" xsi:type="In">
                        <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand localId="11" locator="22:13-22:20" path="status" scope="O" xsi:type="Property"/>
                        </operand>
                        <operand localId="15" locator="22:25-22:59" xsi:type="List">
                           <element localId="12" locator="22:27-22:33" valueType="t:String" value="final" xsi:type="Literal"/>
                           <element localId="13" locator="22:36-22:44" valueType="t:String" value="amended" xsi:type="Literal"/>
                           <element localId="14" locator="22:47-22:57" valueType="t:String" value="corrected" xsi:type="Literal"/>
                        </operand>
                     </where>
                  </operand>
               </source>
            </operand>
            <asTypeSpecifier localId="20" locator="23:14-23:33" name="fhir:CodeableConcept" xsi:type="NamedTypeSpecifier"/>
         </expression>
      </def>
      <def localId="30" locator="31:1-33:31" name="Encounter Type" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.A0.DE1 Encounter Type"/>
            <a:t name="activity" value="NACHC.A0 Contact &amp; Profile"/>
            <a:t name="description" value="The type of patient encounter"/>
            <a:s r="30">
               <a:s>/*
  @dataElement: NACHC.A0.DE1 Encounter Type
  @activity: NACHC.A0 Contact &amp; Profile
  @description: The type of patient encounter
*/
define &quot;Encounter Type&quot;:
  </a:s>
               <a:s r="29">
                  <a:s>
                     <a:s r="24">
                        <a:s r="23">
                           <a:s r="23">
                              <a:s>[Encounter: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Encounter Type Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> E</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="28">
                     <a:s>where </a:s>
                     <a:s r="28">
                        <a:s r="26">
                           <a:s r="25">
                              <a:s>E</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="26">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> = </a:s>
                        <a:s r="27">
                           <a:s>'finished'</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="29" locator="32:3-33:31" xsi:type="Query">
            <source localId="24" locator="32:3-32:42" alias="E">
               <expression localId="23" locator="32:3-32:40" dataType="fhir:Encounter" templateId="http://hl7.org/fhir/StructureDefinition/Encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="32:15-32:39" name="Encounter Type Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="28" locator="33:5-33:31" xsi:type="Equal">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="26" locator="33:11-33:18" path="status" scope="E" xsi:type="Property"/>
               </operand>
               <operand localId="27" locator="33:22-33:31" valueType="t:String" value="finished" xsi:type="Literal"/>
            </where>
         </expression>
      </def>
      <def localId="46" locator="41:1-45:33" name="Sexual Orientation" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.A0.DE48 Sexual Orientation"/>
            <a:t name="activity" value="NACHC.A0 Contact &amp; Profile"/>
            <a:t name="description" value="Concepts Associated with Sexual Orientation Elements"/>
            <a:s r="46">
               <a:s>/*
  @dataElement: NACHC.A0.DE48 Sexual Orientation
  @activity: NACHC.A0 Contact &amp; Profile
  @description: Concepts Associated with Sexual Orientation Elements
*/
define &quot;Sexual Orientation&quot;:
  </a:s>
               <a:s r="45">
                  <a:s r="43">
                     <a:s r="42">
                        <a:s r="31">
                           <a:s>NC</a:s>
                        </a:s>
                        <a:s>.</a:s>
                        <a:s r="42">
                           <a:s>MostRecent(
    </a:s>
                           <a:s r="41">
                              <a:s>
                                 <a:s r="33">
                                    <a:s r="32">
                                       <a:s r="32">
                                          <a:s>[Observation: </a:s>
                                          <a:s>
                                             <a:s>Cx.&quot;Sexual Orientation&quot;</a:s>
                                          </a:s>
                                          <a:s>]</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> O</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>
      </a:s>
                              <a:s r="40">
                                 <a:s>where </a:s>
                                 <a:s r="40">
                                    <a:s r="35">
                                       <a:s r="34">
                                          <a:s>O</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="35">
                                          <a:s>status</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> in </a:s>
                                    <a:s r="39">
                                       <a:s>{ </a:s>
                                       <a:s r="36">
                                          <a:s>'final'</a:s>
                                       </a:s>
                                       <a:s>, </a:s>
                                       <a:s r="37">
                                          <a:s>'amended'</a:s>
                                       </a:s>
                                       <a:s>, </a:s>
                                       <a:s r="38">
                                          <a:s>'corrected'</a:s>
                                       </a:s>
                                       <a:s> }</a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
  )</a:s>
                        </a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="43">
                        <a:s>value</a:s>
                     </a:s>
                  </a:s>
                  <a:s> as </a:s>
                  <a:s r="44">
                     <a:s>FHIR.CodeableConcept</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="45" locator="42:3-45:33" strict="false" xsi:type="As">
            <operand localId="43" locator="42:3-45:9" path="value" xsi:type="Property">
               <source localId="42" locator="42:3-45:3" name="MostRecent" libraryName="NC" xsi:type="FunctionRef">
                  <operand localId="41" locator="43:5-44:59" xsi:type="Query">
                     <source localId="33" locator="43:5-43:44" alias="O">
                        <expression localId="32" locator="43:5-43:42" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                           <codes xsi:type="ToList">
                              <operand locator="43:19-43:41" name="Sexual Orientation" libraryName="Cx" xsi:type="CodeRef"/>
                           </codes>
                        </expression>
                     </source>
                     <where localId="40" locator="44:7-44:59" xsi:type="In">
                        <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand localId="35" locator="44:13-44:20" path="status" scope="O" xsi:type="Property"/>
                        </operand>
                        <operand localId="39" locator="44:25-44:59" xsi:type="List">
                           <element localId="36" locator="44:27-44:33" valueType="t:String" value="final" xsi:type="Literal"/>
                           <element localId="37" locator="44:36-44:44" valueType="t:String" value="amended" xsi:type="Literal"/>
                           <element localId="38" locator="44:47-44:57" valueType="t:String" value="corrected" xsi:type="Literal"/>
                        </operand>
                     </where>
                  </operand>
               </source>
            </operand>
            <asTypeSpecifier localId="44" locator="45:14-45:33" name="fhir:CodeableConcept" xsi:type="NamedTypeSpecifier"/>
         </expression>
      </def>
      <def localId="61" locator="53:1-56:47" name="HIV Diagnosis" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.A1.DE1 HIV Diagnosis"/>
            <a:t name="activity" value="NACHC.A1 HIV"/>
            <a:t name="description" value="Concepts Associated with HIV Diagnosis"/>
            <a:s r="61">
               <a:s>/*
  @dataElement: NACHC.A1.DE1 HIV Diagnosis
  @activity: NACHC.A1 HIV
  @description: Concepts Associated with HIV Diagnosis
*/
define &quot;HIV Diagnosis&quot;:
  </a:s>
               <a:s r="60">
                  <a:s>
                     <a:s r="48">
                        <a:s r="47">
                           <a:s r="47">
                              <a:s>[Condition: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;HIV infection as a condition Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> C</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="59">
                     <a:s>where </a:s>
                     <a:s r="59">
                        <a:s r="53">
                           <a:s r="50">
                              <a:s r="49">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="50">
                                 <a:s>clinicalStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="52">
                              <a:s r="51">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="52">
                                 <a:s>&quot;Active Condition&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>
      and </a:s>
                        <a:s r="58">
                           <a:s r="55">
                              <a:s r="54">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="55">
                                 <a:s>verificationStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="57">
                              <a:s r="56">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="57">
                                 <a:s>&quot;confirmed&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="60" locator="54:3-56:47" xsi:type="Query">
            <source localId="48" locator="54:3-54:56" alias="C">
               <expression localId="47" locator="54:3-54:54" dataType="fhir:Condition" templateId="http://hl7.org/fhir/StructureDefinition/Condition" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="54:15-54:53" name="HIV infection as a condition Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="59" locator="55:5-56:47" xsi:type="And">
               <operand localId="53" locator="55:11-55:51" xsi:type="InValueSet">
                  <code name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="50" locator="55:11-55:26" path="clinicalStatus" scope="C" xsi:type="Property"/>
                  </code>
                  <valueset localId="52" locator="55:31-55:51" name="Active Condition" libraryName="FC"/>
               </operand>
               <operand localId="58" locator="56:11-56:47" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="55" locator="56:11-56:30" path="verificationStatus" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="57" locator="56:34-56:47" name="confirmed" libraryName="FC" xsi:type="CodeRef"/>
                  </operand>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="72" locator="65:1-67:57" name="HIV Test" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.A2.DE1 HIV Test"/>
            <a:t name="activity" value="NACHC.A2 HIV test"/>
            <a:t name="description" value="Concepts Associated with HIV Testing"/>
            <a:s r="72">
               <a:s>//return C.code


/*
  @dataElement: NACHC.A2.DE1 HIV Test
  @activity: NACHC.A2 HIV test
  @description: Concepts Associated with HIV Testing
*/
define &quot;HIV Test&quot;:
  </a:s>
               <a:s r="71">
                  <a:s>
                     <a:s r="63">
                        <a:s r="62">
                           <a:s r="62">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;HIV Test&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="70">
                     <a:s>where </a:s>
                     <a:s r="70">
                        <a:s r="65">
                           <a:s r="64">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="65">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="69">
                           <a:s>{ </a:s>
                           <a:s r="66">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="67">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="68">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="71" locator="66:3-67:57" xsi:type="Query">
            <source localId="63" locator="66:3-66:32" alias="O">
               <expression localId="62" locator="66:3-66:30" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="66:17-66:29" name="HIV Test" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="70" locator="67:5-67:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="65" locator="67:11-67:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="69" locator="67:23-67:57" xsi:type="List">
                  <element localId="66" locator="67:25-67:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="67" locator="67:34-67:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="68" locator="67:45-67:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="88" locator="76:1-79:37" name="HIV Test Ordered" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.A2.DE216 HIV Test Ordered"/>
            <a:t name="activity" value="NACHC.A2 HIV test"/>
            <a:t name="description" value="Concepts Associated with Ordering an HIV Test"/>
            <a:s r="88">
               <a:s>//return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.A2.DE216 HIV Test Ordered
  @activity: NACHC.A2 HIV test
  @description: Concepts Associated with Ordering an HIV Test
*/
define &quot;HIV Test Ordered&quot;:
  </a:s>
               <a:s r="87">
                  <a:s>
                     <a:s r="74">
                        <a:s r="73">
                           <a:s r="73">
                              <a:s>[ServiceRequest: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;HIV Test Ordered Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> SR</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="86">
                     <a:s>where </a:s>
                     <a:s r="86">
                        <a:s r="82">
                           <a:s r="76">
                              <a:s r="75">
                                 <a:s>SR</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="76">
                                 <a:s>status</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="81">
                              <a:s>{ </a:s>
                              <a:s r="77">
                                 <a:s>'draft'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="78">
                                 <a:s>'active'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="79">
                                 <a:s>'on-hold'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="80">
                                 <a:s>'completed'</a:s>
                              </a:s>
                              <a:s> }</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
      and </a:s>
                        <a:s r="85">
                           <a:s r="84">
                              <a:s r="83">
                                 <a:s>SR</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="84">
                                 <a:s>doNotPerform</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is not true</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="87" locator="77:3-79:37" xsi:type="Query">
            <source localId="74" locator="77:3-77:50" alias="SR">
               <expression localId="73" locator="77:3-77:47" dataType="fhir:ServiceRequest" templateId="http://hl7.org/fhir/StructureDefinition/ServiceRequest" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="77:20-77:46" name="HIV Test Ordered Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="86" locator="78:5-79:37" xsi:type="And">
               <operand localId="82" locator="78:11-78:68" xsi:type="In">
                  <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="76" locator="78:11-78:19" path="status" scope="SR" xsi:type="Property"/>
                  </operand>
                  <operand localId="81" locator="78:24-78:68" xsi:type="List">
                     <element localId="77" locator="78:26-78:32" valueType="t:String" value="draft" xsi:type="Literal"/>
                     <element localId="78" locator="78:35-78:42" valueType="t:String" value="active" xsi:type="Literal"/>
                     <element localId="79" locator="78:45-78:53" valueType="t:String" value="on-hold" xsi:type="Literal"/>
                     <element localId="80" locator="78:56-78:66" valueType="t:String" value="completed" xsi:type="Literal"/>
                  </operand>
               </operand>
               <operand localId="85" locator="79:11-79:37" xsi:type="Not">
                  <operand locator="79:11-79:37" xsi:type="IsTrue">
                     <operand name="ToBoolean" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand localId="84" locator="79:11-79:25" path="doNotPerform" scope="SR" xsi:type="Property"/>
                     </operand>
                  </operand>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="103" locator="88:1-91:47" name="Hepatitis C Diagnosis" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.B1.DE1 Hepatitis C Diagnosis"/>
            <a:t name="activity" value="NACHC.B1 HCV"/>
            <a:t name="description" value="Concepts Associated with HCV Diagnosis"/>
            <a:s r="103">
               <a:s>//return SR.code


/*
  @dataElement: NACHC.B1.DE1 Hepatitis C Diagnosis
  @activity: NACHC.B1 HCV
  @description: Concepts Associated with HCV Diagnosis
*/
define &quot;Hepatitis C Diagnosis&quot;:
  </a:s>
               <a:s r="102">
                  <a:s>
                     <a:s r="90">
                        <a:s r="89">
                           <a:s r="89">
                              <a:s>[Condition: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Hepatitis C Diagnosis Codes Grouper&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> C</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="101">
                     <a:s>where </a:s>
                     <a:s r="101">
                        <a:s r="95">
                           <a:s r="92">
                              <a:s r="91">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="92">
                                 <a:s>clinicalStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="94">
                              <a:s r="93">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="94">
                                 <a:s>&quot;Active Condition&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>
      and </a:s>
                        <a:s r="100">
                           <a:s r="97">
                              <a:s r="96">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="97">
                                 <a:s>verificationStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="99">
                              <a:s r="98">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="99">
                                 <a:s>&quot;confirmed&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="102" locator="89:3-91:47" xsi:type="Query">
            <source localId="90" locator="89:3-89:57" alias="C">
               <expression localId="89" locator="89:3-89:55" dataType="fhir:Condition" templateId="http://hl7.org/fhir/StructureDefinition/Condition" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="89:15-89:54" name="Hepatitis C Diagnosis Codes Grouper" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="101" locator="90:5-91:47" xsi:type="And">
               <operand localId="95" locator="90:11-90:51" xsi:type="InValueSet">
                  <code name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="92" locator="90:11-90:26" path="clinicalStatus" scope="C" xsi:type="Property"/>
                  </code>
                  <valueset localId="94" locator="90:31-90:51" name="Active Condition" libraryName="FC"/>
               </operand>
               <operand localId="100" locator="91:11-91:47" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="97" locator="91:11-91:30" path="verificationStatus" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="99" locator="91:34-91:47" name="confirmed" libraryName="FC" xsi:type="CodeRef"/>
                  </operand>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="115" locator="100:1-102:78" name="Hepatitis C Procedures" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.B2.DE112 Hepatitis C Procedures"/>
            <a:t name="activity" value="NACHC.B2 HCV test"/>
            <a:t name="description" value="Concepts Associated with HCV Procedures"/>
            <a:s r="115">
               <a:s>//return C.code


/*
  @dataElement: NACHC.B2.DE112 Hepatitis C Procedures
  @activity: NACHC.B2 HCV test
  @description: Concepts Associated with HCV Procedures
*/
define &quot;Hepatitis C Procedures&quot;:
  </a:s>
               <a:s r="114">
                  <a:s>
                     <a:s r="105">
                        <a:s r="104">
                           <a:s r="104">
                              <a:s>[Procedure: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Hepatitis C Procedures Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> P</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="113">
                     <a:s>where </a:s>
                     <a:s r="113">
                        <a:s r="107">
                           <a:s r="106">
                              <a:s>P</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="107">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="112">
                           <a:s>{ </a:s>
                           <a:s r="108">
                              <a:s>'preparation'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="109">
                              <a:s>'in-progress'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="110">
                              <a:s>'on-hold'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="111">
                              <a:s>'completed'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="114" locator="101:3-102:78" xsi:type="Query">
            <source localId="105" locator="101:3-101:50" alias="P">
               <expression localId="104" locator="101:3-101:48" dataType="fhir:Procedure" templateId="http://hl7.org/fhir/StructureDefinition/Procedure" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="101:15-101:47" name="Hepatitis C Procedures Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="113" locator="102:5-102:78" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="107" locator="102:11-102:18" path="status" scope="P" xsi:type="Property"/>
               </operand>
               <operand localId="112" locator="102:23-102:78" xsi:type="List">
                  <element localId="108" locator="102:25-102:37" valueType="t:String" value="preparation" xsi:type="Literal"/>
                  <element localId="109" locator="102:40-102:52" valueType="t:String" value="in-progress" xsi:type="Literal"/>
                  <element localId="110" locator="102:55-102:63" valueType="t:String" value="on-hold" xsi:type="Literal"/>
                  <element localId="111" locator="102:66-102:76" valueType="t:String" value="completed" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="126" locator="111:1-113:57" name="Hepatitis C Test" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.B2.DE1 Hepatitis C Test"/>
            <a:t name="activity" value="NACHC.B2 HCV test"/>
            <a:t name="description" value="Concepts Associated with HCV Testing"/>
            <a:s r="126">
               <a:s>//return P.code


/*
  @dataElement: NACHC.B2.DE1 Hepatitis C Test
  @activity: NACHC.B2 HCV test
  @description: Concepts Associated with HCV Testing
*/
define &quot;Hepatitis C Test&quot;:
  </a:s>
               <a:s r="125">
                  <a:s>
                     <a:s r="117">
                        <a:s r="116">
                           <a:s r="116">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Hepatitis C Test&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="124">
                     <a:s>where </a:s>
                     <a:s r="124">
                        <a:s r="119">
                           <a:s r="118">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="119">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="123">
                           <a:s>{ </a:s>
                           <a:s r="120">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="121">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="122">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="125" locator="112:3-113:57" xsi:type="Query">
            <source localId="117" locator="112:3-112:40" alias="O">
               <expression localId="116" locator="112:3-112:38" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="112:17-112:37" name="Hepatitis C Test" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="124" locator="113:5-113:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="119" locator="113:11-113:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="123" locator="113:23-113:57" xsi:type="List">
                  <element localId="120" locator="113:25-113:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="121" locator="113:34-113:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="122" locator="113:45-113:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="141" locator="122:1-125:47" name="Syphilis Diagnosis" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.C1.DE1 Syphilis Diagnosis"/>
            <a:t name="activity" value="NACHC.C1 Syphilis"/>
            <a:t name="description" value="Concepts Associated with Syphilis Diagnosis"/>
            <a:s r="141">
               <a:s>//return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.C1.DE1 Syphilis Diagnosis
  @activity: NACHC.C1 Syphilis
  @description: Concepts Associated with Syphilis Diagnosis
*/
define &quot;Syphilis Diagnosis&quot;:
  </a:s>
               <a:s r="140">
                  <a:s>
                     <a:s r="128">
                        <a:s r="127">
                           <a:s r="127">
                              <a:s>[Condition: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Syphilis Diagnosis Codes Grouper&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> C</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="139">
                     <a:s>where </a:s>
                     <a:s r="139">
                        <a:s r="133">
                           <a:s r="130">
                              <a:s r="129">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="130">
                                 <a:s>clinicalStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="132">
                              <a:s r="131">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="132">
                                 <a:s>&quot;Active Condition&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>
      and </a:s>
                        <a:s r="138">
                           <a:s r="135">
                              <a:s r="134">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="135">
                                 <a:s>verificationStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="137">
                              <a:s r="136">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="137">
                                 <a:s>&quot;confirmed&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="140" locator="123:3-125:47" xsi:type="Query">
            <source localId="128" locator="123:3-123:54" alias="C">
               <expression localId="127" locator="123:3-123:52" dataType="fhir:Condition" templateId="http://hl7.org/fhir/StructureDefinition/Condition" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="123:15-123:51" name="Syphilis Diagnosis Codes Grouper" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="139" locator="124:5-125:47" xsi:type="And">
               <operand localId="133" locator="124:11-124:51" xsi:type="InValueSet">
                  <code name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="130" locator="124:11-124:26" path="clinicalStatus" scope="C" xsi:type="Property"/>
                  </code>
                  <valueset localId="132" locator="124:31-124:51" name="Active Condition" libraryName="FC"/>
               </operand>
               <operand localId="138" locator="125:11-125:47" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="135" locator="125:11-125:30" path="verificationStatus" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="137" locator="125:34-125:47" name="confirmed" libraryName="FC" xsi:type="CodeRef"/>
                  </operand>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="152" locator="134:1-136:57" name="Syphilis Test" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.C2.DE1 Syphilis Test"/>
            <a:t name="activity" value="NACHC.C2 Syphilis test"/>
            <a:t name="description" value="Concepts Associated with Syphilis Testing"/>
            <a:s r="152">
               <a:s>//return C.code


/*
  @dataElement: NACHC.C2.DE1 Syphilis Test
  @activity: NACHC.C2 Syphilis test
  @description: Concepts Associated with Syphilis Testing
*/
define &quot;Syphilis Test&quot;:
  </a:s>
               <a:s r="151">
                  <a:s>
                     <a:s r="143">
                        <a:s r="142">
                           <a:s r="142">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Syphilis Test&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="150">
                     <a:s>where </a:s>
                     <a:s r="150">
                        <a:s r="145">
                           <a:s r="144">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="145">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="149">
                           <a:s>{ </a:s>
                           <a:s r="146">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="147">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="148">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="151" locator="135:3-136:57" xsi:type="Query">
            <source localId="143" locator="135:3-135:37" alias="O">
               <expression localId="142" locator="135:3-135:35" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="135:17-135:34" name="Syphilis Test" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="150" locator="136:5-136:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="145" locator="136:11-136:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="149" locator="136:23-136:57" xsi:type="List">
                  <element localId="146" locator="136:25-136:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="147" locator="136:34-136:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="148" locator="136:45-136:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="167" locator="145:1-148:47" name="Gonorrhea Diagnosis" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.D1.DE1 Gonorrhea Diagnosis"/>
            <a:t name="activity" value="NACHC.D1 Gonorrhea"/>
            <a:t name="description" value="Concepts Associated with Gonorrhea Diagnosis"/>
            <a:s r="167">
               <a:s>//return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.D1.DE1 Gonorrhea Diagnosis
  @activity: NACHC.D1 Gonorrhea
  @description: Concepts Associated with Gonorrhea Diagnosis
*/
define &quot;Gonorrhea Diagnosis&quot;:
  </a:s>
               <a:s r="166">
                  <a:s>
                     <a:s r="154">
                        <a:s r="153">
                           <a:s r="153">
                              <a:s>[Condition: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Gonorrhea Diagnosis Codes Grouper&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> C</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="165">
                     <a:s>where </a:s>
                     <a:s r="165">
                        <a:s r="159">
                           <a:s r="156">
                              <a:s r="155">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="156">
                                 <a:s>clinicalStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="158">
                              <a:s r="157">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="158">
                                 <a:s>&quot;Active Condition&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>
      and </a:s>
                        <a:s r="164">
                           <a:s r="161">
                              <a:s r="160">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="161">
                                 <a:s>verificationStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="163">
                              <a:s r="162">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="163">
                                 <a:s>&quot;confirmed&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="166" locator="146:3-148:47" xsi:type="Query">
            <source localId="154" locator="146:3-146:55" alias="C">
               <expression localId="153" locator="146:3-146:53" dataType="fhir:Condition" templateId="http://hl7.org/fhir/StructureDefinition/Condition" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="146:15-146:52" name="Gonorrhea Diagnosis Codes Grouper" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="165" locator="147:5-148:47" xsi:type="And">
               <operand localId="159" locator="147:11-147:51" xsi:type="InValueSet">
                  <code name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="156" locator="147:11-147:26" path="clinicalStatus" scope="C" xsi:type="Property"/>
                  </code>
                  <valueset localId="158" locator="147:31-147:51" name="Active Condition" libraryName="FC"/>
               </operand>
               <operand localId="164" locator="148:11-148:47" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="161" locator="148:11-148:30" path="verificationStatus" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="163" locator="148:34-148:47" name="confirmed" libraryName="FC" xsi:type="CodeRef"/>
                  </operand>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="178" locator="157:1-159:57" name="Gonorrhea Test" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.D2.DE1 Gonorrhea Test"/>
            <a:t name="activity" value="NACHC.D2 Gonorrhea test"/>
            <a:t name="description" value="Concepts Associated with Gonorrhea Testing"/>
            <a:s r="178">
               <a:s>//return C.code


/*
  @dataElement: NACHC.D2.DE1 Gonorrhea Test
  @activity: NACHC.D2 Gonorrhea test
  @description: Concepts Associated with Gonorrhea Testing
*/
define &quot;Gonorrhea Test&quot;:
  </a:s>
               <a:s r="177">
                  <a:s>
                     <a:s r="169">
                        <a:s r="168">
                           <a:s r="168">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Gonorrhea Test&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="176">
                     <a:s>where </a:s>
                     <a:s r="176">
                        <a:s r="171">
                           <a:s r="170">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="171">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="175">
                           <a:s>{ </a:s>
                           <a:s r="172">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="173">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="174">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="177" locator="158:3-159:57" xsi:type="Query">
            <source localId="169" locator="158:3-158:38" alias="O">
               <expression localId="168" locator="158:3-158:36" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="158:17-158:35" name="Gonorrhea Test" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="176" locator="159:5-159:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="171" locator="159:11-159:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="175" locator="159:23-159:57" xsi:type="List">
                  <element localId="172" locator="159:25-159:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="173" locator="159:34-159:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="174" locator="159:45-159:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="193" locator="168:1-171:47" name="Chlamydia Diagnosis" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.E1.DE1 Chlamydia Diagnosis"/>
            <a:t name="activity" value="NACHC.E1 Chlamydia"/>
            <a:t name="description" value="Concepts Associated with Chlamydia Diagnosis"/>
            <a:s r="193">
               <a:s>//return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.E1.DE1 Chlamydia Diagnosis
  @activity: NACHC.E1 Chlamydia
  @description: Concepts Associated with Chlamydia Diagnosis
*/
define &quot;Chlamydia Diagnosis&quot;:
  </a:s>
               <a:s r="192">
                  <a:s>
                     <a:s r="180">
                        <a:s r="179">
                           <a:s r="179">
                              <a:s>[Condition: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Chlamydia Diagnosis Codes Grouper&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> C</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="191">
                     <a:s>where </a:s>
                     <a:s r="191">
                        <a:s r="185">
                           <a:s r="182">
                              <a:s r="181">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="182">
                                 <a:s>clinicalStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="184">
                              <a:s r="183">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="184">
                                 <a:s>&quot;Active Condition&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>
      and </a:s>
                        <a:s r="190">
                           <a:s r="187">
                              <a:s r="186">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="187">
                                 <a:s>verificationStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="189">
                              <a:s r="188">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="189">
                                 <a:s>&quot;confirmed&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="192" locator="169:3-171:47" xsi:type="Query">
            <source localId="180" locator="169:3-169:55" alias="C">
               <expression localId="179" locator="169:3-169:53" dataType="fhir:Condition" templateId="http://hl7.org/fhir/StructureDefinition/Condition" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="169:15-169:52" name="Chlamydia Diagnosis Codes Grouper" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="191" locator="170:5-171:47" xsi:type="And">
               <operand localId="185" locator="170:11-170:51" xsi:type="InValueSet">
                  <code name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="182" locator="170:11-170:26" path="clinicalStatus" scope="C" xsi:type="Property"/>
                  </code>
                  <valueset localId="184" locator="170:31-170:51" name="Active Condition" libraryName="FC"/>
               </operand>
               <operand localId="190" locator="171:11-171:47" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="187" locator="171:11-171:30" path="verificationStatus" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="189" locator="171:34-171:47" name="confirmed" libraryName="FC" xsi:type="CodeRef"/>
                  </operand>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="204" locator="180:1-182:57" name="Chlamydia Test" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.E2.DE1 Chlamydia Test"/>
            <a:t name="activity" value="NACHC.E2 Chlamydia test"/>
            <a:t name="description" value="Concepts Associated with Chlamydia Testing"/>
            <a:s r="204">
               <a:s>//return C.code


/*
  @dataElement: NACHC.E2.DE1 Chlamydia Test
  @activity: NACHC.E2 Chlamydia test
  @description: Concepts Associated with Chlamydia Testing
*/
define &quot;Chlamydia Test&quot;:
  </a:s>
               <a:s r="203">
                  <a:s>
                     <a:s r="195">
                        <a:s r="194">
                           <a:s r="194">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Chlamydia Test&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="202">
                     <a:s>where </a:s>
                     <a:s r="202">
                        <a:s r="197">
                           <a:s r="196">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="197">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="201">
                           <a:s>{ </a:s>
                           <a:s r="198">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="199">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="200">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="203" locator="181:3-182:57" xsi:type="Query">
            <source localId="195" locator="181:3-181:38" alias="O">
               <expression localId="194" locator="181:3-181:36" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="181:17-181:35" name="Chlamydia Test" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="202" locator="182:5-182:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="197" locator="182:11-182:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="201" locator="182:23-182:57" xsi:type="List">
                  <element localId="198" locator="182:25-182:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="199" locator="182:34-182:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="200" locator="182:45-182:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="216" locator="191:1-193:78" name="Drug Rehabilitation" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F1.DE1 Drug Rehabilitation"/>
            <a:t name="activity" value="NACHC.F1 Injection Drug Use"/>
            <a:t name="description" value="Concepts related to Injection Drug Use Rehabiliation"/>
            <a:s r="216">
               <a:s>//return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.F1.DE1 Drug Rehabilitation
  @activity: NACHC.F1 Injection Drug Use
  @description: Concepts related to Injection Drug Use Rehabiliation
*/
define &quot;Drug Rehabilitation&quot;:
  </a:s>
               <a:s r="215">
                  <a:s>
                     <a:s r="206">
                        <a:s r="205">
                           <a:s r="205">
                              <a:s>[Procedure: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Drug Rehabilitation Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> P</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="214">
                     <a:s>where </a:s>
                     <a:s r="214">
                        <a:s r="208">
                           <a:s r="207">
                              <a:s>P</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="208">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="213">
                           <a:s>{ </a:s>
                           <a:s r="209">
                              <a:s>'preparation'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="210">
                              <a:s>'in-progress'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="211">
                              <a:s>'on-hold'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="212">
                              <a:s>'completed'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="215" locator="192:3-193:78" xsi:type="Query">
            <source localId="206" locator="192:3-192:47" alias="P">
               <expression localId="205" locator="192:3-192:45" dataType="fhir:Procedure" templateId="http://hl7.org/fhir/StructureDefinition/Procedure" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="192:15-192:44" name="Drug Rehabilitation Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="214" locator="193:5-193:78" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="208" locator="193:11-193:18" path="status" scope="P" xsi:type="Property"/>
               </operand>
               <operand localId="213" locator="193:23-193:78" xsi:type="List">
                  <element localId="209" locator="193:25-193:37" valueType="t:String" value="preparation" xsi:type="Literal"/>
                  <element localId="210" locator="193:40-193:52" valueType="t:String" value="in-progress" xsi:type="Literal"/>
                  <element localId="211" locator="193:55-193:63" valueType="t:String" value="on-hold" xsi:type="Literal"/>
                  <element localId="212" locator="193:66-193:76" valueType="t:String" value="completed" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="218" locator="202:1-203:54" name="Injection Drug Use" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F1.DE200 Injection Drug Use"/>
            <a:t name="activity" value="NACHC.F1 Injection Drug Use"/>
            <a:t name="description" value="Concepts related to Injection Drug Use History"/>
            <a:s r="218">
               <a:s>//return P.code


/*
  @dataElement: NACHC.F1.DE200 Injection Drug Use
  @activity: NACHC.F1 Injection Drug Use
  @description: Concepts related to Injection Drug Use History
*/
define &quot;Injection Drug Use&quot;:
  </a:s>
               <a:s r="217">
                  <a:s>[MedicationStatement: </a:s>
                  <a:s>
                     <a:s>Cx.&quot;Injection Drug Use Codes&quot;</a:s>
                  </a:s>
                  <a:s>]</a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="217" locator="203:3-203:54" dataType="fhir:MedicationStatement" templateId="http://hl7.org/fhir/StructureDefinition/MedicationStatement" codeProperty="medication" codeComparator="in" xsi:type="Retrieve">
            <codes locator="203:25-203:53" name="Injection Drug Use Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
         </expression>
      </def>
      <def localId="233" locator="210:1-213:47" name="Injection Drug Use Diagnosis" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F1.DE15 Injection Drug Use Diagnosis"/>
            <a:t name="activity" value="NACHC.F1 Injection Drug Use"/>
            <a:t name="description" value="Concepts Associated with Injection Drug Use Diagnosis"/>
            <a:s r="233">
               <a:s>/*
  @dataElement: NACHC.F1.DE15 Injection Drug Use Diagnosis
  @activity: NACHC.F1 Injection Drug Use
  @description: Concepts Associated with Injection Drug Use Diagnosis
*/
define &quot;Injection Drug Use Diagnosis&quot;:
  </a:s>
               <a:s r="232">
                  <a:s>
                     <a:s r="220">
                        <a:s r="219">
                           <a:s r="219">
                              <a:s>[Condition: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Injection Drug Use Diagnosis Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> C</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="231">
                     <a:s>where </a:s>
                     <a:s r="231">
                        <a:s r="225">
                           <a:s r="222">
                              <a:s r="221">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="222">
                                 <a:s>clinicalStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="224">
                              <a:s r="223">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="224">
                                 <a:s>&quot;Active Condition&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>
      and </a:s>
                        <a:s r="230">
                           <a:s r="227">
                              <a:s r="226">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="227">
                                 <a:s>verificationStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="229">
                              <a:s r="228">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="229">
                                 <a:s>&quot;confirmed&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="232" locator="211:3-213:47" xsi:type="Query">
            <source localId="220" locator="211:3-211:56" alias="C">
               <expression localId="219" locator="211:3-211:54" dataType="fhir:Condition" templateId="http://hl7.org/fhir/StructureDefinition/Condition" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="211:15-211:53" name="Injection Drug Use Diagnosis Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="231" locator="212:5-213:47" xsi:type="And">
               <operand localId="225" locator="212:11-212:51" xsi:type="InValueSet">
                  <code name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="222" locator="212:11-212:26" path="clinicalStatus" scope="C" xsi:type="Property"/>
                  </code>
                  <valueset localId="224" locator="212:31-212:51" name="Active Condition" libraryName="FC"/>
               </operand>
               <operand localId="230" locator="213:11-213:47" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="227" locator="213:11-213:30" path="verificationStatus" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="229" locator="213:34-213:47" name="confirmed" libraryName="FC" xsi:type="CodeRef"/>
                  </operand>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="244" locator="222:1-224:57" name="Injection Findings" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F1.DE12 Injection Findings"/>
            <a:t name="activity" value="NACHC.F1 Injection Drug Use"/>
            <a:t name="description" value="Concepts related to findings or observations related to Injection Drug Usage"/>
            <a:s r="244">
               <a:s>//return C.code


/*
  @dataElement: NACHC.F1.DE12 Injection Findings
  @activity: NACHC.F1 Injection Drug Use
  @description: Concepts related to findings or observations related to Injection Drug Usage
*/
define &quot;Injection Findings&quot;:
  </a:s>
               <a:s r="243">
                  <a:s>
                     <a:s r="235">
                        <a:s r="234">
                           <a:s r="234">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Injection Findings&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="242">
                     <a:s>where </a:s>
                     <a:s r="242">
                        <a:s r="237">
                           <a:s r="236">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="237">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="241">
                           <a:s>{ </a:s>
                           <a:s r="238">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="239">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="240">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="243" locator="223:3-224:57" xsi:type="Query">
            <source localId="235" locator="223:3-223:42" alias="O">
               <expression localId="234" locator="223:3-223:40" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="223:17-223:39" name="Injection Findings" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="242" locator="224:5-224:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="237" locator="224:11-224:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="241" locator="224:23-224:57" xsi:type="List">
                  <element localId="238" locator="224:25-224:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="239" locator="224:34-224:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="240" locator="224:45-224:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="256" locator="233:1-235:78" name="Maternal Care" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F2.DE108 Maternal Care"/>
            <a:t name="activity" value="NACHC.F2 Pregnancy"/>
            <a:t name="description" value="Procedures identifying Maternal Care for Pregnancy"/>
            <a:s r="256">
               <a:s>//return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.F2.DE108 Maternal Care
  @activity: NACHC.F2 Pregnancy
  @description: Procedures identifying Maternal Care for Pregnancy
*/
define &quot;Maternal Care&quot;:
  </a:s>
               <a:s r="255">
                  <a:s>
                     <a:s r="246">
                        <a:s r="245">
                           <a:s r="245">
                              <a:s>[Procedure: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Maternal Care Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> P</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="254">
                     <a:s>where </a:s>
                     <a:s r="254">
                        <a:s r="248">
                           <a:s r="247">
                              <a:s>P</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="248">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="253">
                           <a:s>{ </a:s>
                           <a:s r="249">
                              <a:s>'preparation'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="250">
                              <a:s>'in-progress'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="251">
                              <a:s>'on-hold'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="252">
                              <a:s>'completed'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="255" locator="234:3-235:78" xsi:type="Query">
            <source localId="246" locator="234:3-234:41" alias="P">
               <expression localId="245" locator="234:3-234:39" dataType="fhir:Procedure" templateId="http://hl7.org/fhir/StructureDefinition/Procedure" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="234:15-234:38" name="Maternal Care Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="254" locator="235:5-235:78" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="248" locator="235:11-235:18" path="status" scope="P" xsi:type="Property"/>
               </operand>
               <operand localId="253" locator="235:23-235:78" xsi:type="List">
                  <element localId="249" locator="235:25-235:37" valueType="t:String" value="preparation" xsi:type="Literal"/>
                  <element localId="250" locator="235:40-235:52" valueType="t:String" value="in-progress" xsi:type="Literal"/>
                  <element localId="251" locator="235:55-235:63" valueType="t:String" value="on-hold" xsi:type="Literal"/>
                  <element localId="252" locator="235:66-235:76" valueType="t:String" value="completed" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="271" locator="244:1-247:47" name="Pregnancy Conditions" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F2.DE1131 Pregnancy Conditions"/>
            <a:t name="activity" value="NACHC.F2 Pregnancy"/>
            <a:t name="description" value="Conditions identified for Pregnancy"/>
            <a:s r="271">
               <a:s>//return P.code


/*
  @dataElement: NACHC.F2.DE1131 Pregnancy Conditions
  @activity: NACHC.F2 Pregnancy
  @description: Conditions identified for Pregnancy
*/
define &quot;Pregnancy Conditions&quot;:
  </a:s>
               <a:s r="270">
                  <a:s>
                     <a:s r="258">
                        <a:s r="257">
                           <a:s r="257">
                              <a:s>[Condition: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Pregnancy Conditions Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> C</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="269">
                     <a:s>where </a:s>
                     <a:s r="269">
                        <a:s r="263">
                           <a:s r="260">
                              <a:s r="259">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="260">
                                 <a:s>clinicalStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="262">
                              <a:s r="261">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="262">
                                 <a:s>&quot;Active Condition&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>
      and </a:s>
                        <a:s r="268">
                           <a:s r="265">
                              <a:s r="264">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="265">
                                 <a:s>verificationStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="267">
                              <a:s r="266">
                                 <a:s>FC</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="267">
                                 <a:s>&quot;confirmed&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="270" locator="245:3-247:47" xsi:type="Query">
            <source localId="258" locator="245:3-245:48" alias="C">
               <expression localId="257" locator="245:3-245:46" dataType="fhir:Condition" templateId="http://hl7.org/fhir/StructureDefinition/Condition" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="245:15-245:45" name="Pregnancy Conditions Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="269" locator="246:5-247:47" xsi:type="And">
               <operand localId="263" locator="246:11-246:51" xsi:type="InValueSet">
                  <code name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="260" locator="246:11-246:26" path="clinicalStatus" scope="C" xsi:type="Property"/>
                  </code>
                  <valueset localId="262" locator="246:31-246:51" name="Active Condition" libraryName="FC"/>
               </operand>
               <operand localId="268" locator="247:11-247:47" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="265" locator="247:11-247:30" path="verificationStatus" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="267" locator="247:34-247:47" name="confirmed" libraryName="FC" xsi:type="CodeRef"/>
                  </operand>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="279" locator="256:1-258:31" name="Pregnancy Encounters" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F2.DE1 Pregnancy Encounters"/>
            <a:t name="activity" value="NACHC.F2 Pregnancy"/>
            <a:t name="description" value="Encounters in the usage of Pregnancy"/>
            <a:s r="279">
               <a:s>//return C.code


/*
  @dataElement: NACHC.F2.DE1 Pregnancy Encounters
  @activity: NACHC.F2 Pregnancy
  @description: Encounters in the usage of Pregnancy
*/
define &quot;Pregnancy Encounters&quot;:
  </a:s>
               <a:s r="278">
                  <a:s>
                     <a:s r="273">
                        <a:s r="272">
                           <a:s r="272">
                              <a:s>[Encounter: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Pregnancy Encounters Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> E</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="277">
                     <a:s>where </a:s>
                     <a:s r="277">
                        <a:s r="275">
                           <a:s r="274">
                              <a:s>E</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="275">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> = </a:s>
                        <a:s r="276">
                           <a:s>'finished'</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="278" locator="257:3-258:31" xsi:type="Query">
            <source localId="273" locator="257:3-257:48" alias="E">
               <expression localId="272" locator="257:3-257:46" dataType="fhir:Encounter" templateId="http://hl7.org/fhir/StructureDefinition/Encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="257:15-257:45" name="Pregnancy Encounters Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="277" locator="258:5-258:31" xsi:type="Equal">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="275" locator="258:11-258:18" path="status" scope="E" xsi:type="Property"/>
               </operand>
               <operand localId="276" locator="258:22-258:31" valueType="t:String" value="finished" xsi:type="Literal"/>
            </where>
         </expression>
      </def>
      <def localId="290" locator="267:1-269:57" name="Pregnancy Observations" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F2.DE904 Pregnancy Observations"/>
            <a:t name="activity" value="NACHC.F2 Pregnancy"/>
            <a:t name="description" value="Observations identified for Pregnancy"/>
            <a:s r="290">
               <a:s>//return E.type


/*
  @dataElement: NACHC.F2.DE904 Pregnancy Observations
  @activity: NACHC.F2 Pregnancy
  @description: Observations identified for Pregnancy
*/
define &quot;Pregnancy Observations&quot;:
  </a:s>
               <a:s r="289">
                  <a:s>
                     <a:s r="281">
                        <a:s r="280">
                           <a:s r="280">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Pregnancy Observations Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="288">
                     <a:s>where </a:s>
                     <a:s r="288">
                        <a:s r="283">
                           <a:s r="282">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="283">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="287">
                           <a:s>{ </a:s>
                           <a:s r="284">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="285">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="286">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="289" locator="268:3-269:57" xsi:type="Query">
            <source localId="281" locator="268:3-268:52" alias="O">
               <expression localId="280" locator="268:3-268:50" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="268:17-268:49" name="Pregnancy Observations Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="288" locator="269:5-269:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="283" locator="269:11-269:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="287" locator="269:23-269:57" xsi:type="List">
                  <element localId="284" locator="269:25-269:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="285" locator="269:34-269:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="286" locator="269:45-269:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="302" locator="278:1-280:78" name="Pregnancy Procedures" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F2.DE672 Pregnancy Procedures"/>
            <a:t name="activity" value="NACHC.F2 Pregnancy"/>
            <a:t name="description" value="Procedures identified for Pregnancy"/>
            <a:s r="302">
               <a:s>//return O.value as FHIR.CodeableConcept


/*
  @dataElement: NACHC.F2.DE672 Pregnancy Procedures
  @activity: NACHC.F2 Pregnancy
  @description: Procedures identified for Pregnancy
*/
define &quot;Pregnancy Procedures&quot;:
  </a:s>
               <a:s r="301">
                  <a:s>
                     <a:s r="292">
                        <a:s r="291">
                           <a:s r="291">
                              <a:s>[Procedure: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Pregnancy Procedures Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> P</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="300">
                     <a:s>where </a:s>
                     <a:s r="300">
                        <a:s r="294">
                           <a:s r="293">
                              <a:s>P</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="294">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="299">
                           <a:s>{ </a:s>
                           <a:s r="295">
                              <a:s>'preparation'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="296">
                              <a:s>'in-progress'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="297">
                              <a:s>'on-hold'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="298">
                              <a:s>'completed'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="301" locator="279:3-280:78" xsi:type="Query">
            <source localId="292" locator="279:3-279:48" alias="P">
               <expression localId="291" locator="279:3-279:46" dataType="fhir:Procedure" templateId="http://hl7.org/fhir/StructureDefinition/Procedure" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="279:15-279:45" name="Pregnancy Procedures Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="300" locator="280:5-280:78" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="294" locator="280:11-280:18" path="status" scope="P" xsi:type="Property"/>
               </operand>
               <operand localId="299" locator="280:23-280:78" xsi:type="List">
                  <element localId="295" locator="280:25-280:37" valueType="t:String" value="preparation" xsi:type="Literal"/>
                  <element localId="296" locator="280:40-280:52" valueType="t:String" value="in-progress" xsi:type="Literal"/>
                  <element localId="297" locator="280:55-280:63" valueType="t:String" value="on-hold" xsi:type="Literal"/>
                  <element localId="298" locator="280:66-280:76" valueType="t:String" value="completed" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="314" locator="289:1-291:78" name="Pregnancy Supervision" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F2.DE42 Pregnancy Supervision"/>
            <a:t name="activity" value="NACHC.F2 Pregnancy"/>
            <a:t name="description" value="Procedures in the usage of the Supervision of Pregnancy"/>
            <a:s r="314">
               <a:s>//return P.code


/*
  @dataElement: NACHC.F2.DE42 Pregnancy Supervision
  @activity: NACHC.F2 Pregnancy
  @description: Procedures in the usage of the Supervision of Pregnancy
*/
define &quot;Pregnancy Supervision&quot;:
  </a:s>
               <a:s r="313">
                  <a:s>
                     <a:s r="304">
                        <a:s r="303">
                           <a:s r="303">
                              <a:s>[Procedure: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Pregnancy Supervision Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> P</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="312">
                     <a:s>where </a:s>
                     <a:s r="312">
                        <a:s r="306">
                           <a:s r="305">
                              <a:s>P</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="306">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="311">
                           <a:s>{ </a:s>
                           <a:s r="307">
                              <a:s>'preparation'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="308">
                              <a:s>'in-progress'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="309">
                              <a:s>'on-hold'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="310">
                              <a:s>'completed'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="313" locator="290:3-291:78" xsi:type="Query">
            <source localId="304" locator="290:3-290:49" alias="P">
               <expression localId="303" locator="290:3-290:47" dataType="fhir:Procedure" templateId="http://hl7.org/fhir/StructureDefinition/Procedure" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="290:15-290:46" name="Pregnancy Supervision Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="312" locator="291:5-291:78" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="306" locator="291:11-291:18" path="status" scope="P" xsi:type="Property"/>
               </operand>
               <operand localId="311" locator="291:23-291:78" xsi:type="List">
                  <element localId="307" locator="291:25-291:37" valueType="t:String" value="preparation" xsi:type="Literal"/>
                  <element localId="308" locator="291:40-291:52" valueType="t:String" value="in-progress" xsi:type="Literal"/>
                  <element localId="309" locator="291:55-291:63" valueType="t:String" value="on-hold" xsi:type="Literal"/>
                  <element localId="310" locator="291:66-291:76" valueType="t:String" value="completed" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="322" locator="300:1-302:31" name="Third Trimester Encounters" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.F2.DE38 Third Trimester Encounters"/>
            <a:t name="activity" value="NACHC.F2 Pregnancy"/>
            <a:t name="description" value="Third Trimester Encounters in the usage of Pregnancy"/>
            <a:s r="322">
               <a:s>//return P.code


/*
  @dataElement: NACHC.F2.DE38 Third Trimester Encounters
  @activity: NACHC.F2 Pregnancy
  @description: Third Trimester Encounters in the usage of Pregnancy
*/
define &quot;Third Trimester Encounters&quot;:
  </a:s>
               <a:s r="321">
                  <a:s>
                     <a:s r="316">
                        <a:s r="315">
                           <a:s r="315">
                              <a:s>[Encounter: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Third Trimester Encounters Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> E</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="320">
                     <a:s>where </a:s>
                     <a:s r="320">
                        <a:s r="318">
                           <a:s r="317">
                              <a:s>E</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="318">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> = </a:s>
                        <a:s r="319">
                           <a:s>'finished'</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="321" locator="301:3-302:31" xsi:type="Query">
            <source localId="316" locator="301:3-301:54" alias="E">
               <expression localId="315" locator="301:3-301:52" dataType="fhir:Encounter" templateId="http://hl7.org/fhir/StructureDefinition/Encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="301:15-301:51" name="Third Trimester Encounters Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="320" locator="302:5-302:31" xsi:type="Equal">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="318" locator="302:11-302:18" path="status" scope="E" xsi:type="Property"/>
               </operand>
               <operand localId="319" locator="302:22-302:31" valueType="t:String" value="finished" xsi:type="Literal"/>
            </where>
         </expression>
      </def>
      <def localId="324" locator="311:1-312:68" name="PEP Dispensed Medications" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.G1.DE143 PEP Dispensed Medications"/>
            <a:t name="activity" value="NACHC.G1 Pep"/>
            <a:t name="description" value="List of Medications Provisioned and Supplied for Non-Occupational Post Exposure Prophylaxis"/>
            <a:s r="324">
               <a:s>//return E.type


/*
  @dataElement: NACHC.G1.DE143 PEP Dispensed Medications
  @activity: NACHC.G1 Pep
  @description: List of Medications Provisioned and Supplied for Non-Occupational Post Exposure Prophylaxis
*/
define &quot;PEP Dispensed Medications&quot;:
  </a:s>
               <a:s r="323">
                  <a:s>[MedicationDispense: </a:s>
                  <a:s>
                     <a:s>Cx.&quot;PEP Dispensed Medications Codes Grouper&quot;</a:s>
                  </a:s>
                  <a:s>]</a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="323" locator="312:3-312:68" dataType="fhir:MedicationDispense" templateId="http://hl7.org/fhir/StructureDefinition/MedicationDispense" codeProperty="medication" codeComparator="in" xsi:type="Retrieve">
            <codes locator="312:24-312:67" name="PEP Dispensed Medications Codes Grouper" libraryName="Cx" xsi:type="ValueSetRef"/>
         </expression>
      </def>
      <def localId="340" locator="319:1-322:37" name="PEP Medication Prescriptions" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.G1.DE5 PEP Medication Prescriptions"/>
            <a:t name="activity" value="NACHC.G1 Pep"/>
            <a:t name="description" value="List of Medication Prescriptions for Non-Occupational Post Exposure Prophylaxis"/>
            <a:s r="340">
               <a:s>/*
  @dataElement: NACHC.G1.DE5 PEP Medication Prescriptions
  @activity: NACHC.G1 Pep
  @description: List of Medication Prescriptions for Non-Occupational Post Exposure Prophylaxis
*/
define &quot;PEP Medication Prescriptions&quot;:
  </a:s>
               <a:s r="339">
                  <a:s>
                     <a:s r="326">
                        <a:s r="325">
                           <a:s r="325">
                              <a:s>[MedicationRequest: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;PEP Medication Prescriptions Codes Grouper&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> MR</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="338">
                     <a:s>where </a:s>
                     <a:s r="338">
                        <a:s r="334">
                           <a:s r="328">
                              <a:s r="327">
                                 <a:s>MR</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="328">
                                 <a:s>status</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="333">
                              <a:s>{ </a:s>
                              <a:s r="329">
                                 <a:s>'draft'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="330">
                                 <a:s>'active'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="331">
                                 <a:s>'on-hold'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="332">
                                 <a:s>'completed'</a:s>
                              </a:s>
                              <a:s> }</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
      and </a:s>
                        <a:s r="337">
                           <a:s r="336">
                              <a:s r="335">
                                 <a:s>MR</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="336">
                                 <a:s>doNotPerform</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is not true</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="339" locator="320:3-322:37" xsi:type="Query">
            <source localId="326" locator="320:3-320:73" alias="MR">
               <expression localId="325" locator="320:3-320:70" dataType="fhir:MedicationRequest" templateId="http://hl7.org/fhir/StructureDefinition/MedicationRequest" codeProperty="medication" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="320:23-320:69" name="PEP Medication Prescriptions Codes Grouper" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="338" locator="321:5-322:37" xsi:type="And">
               <operand localId="334" locator="321:11-321:68" xsi:type="In">
                  <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="328" locator="321:11-321:19" path="status" scope="MR" xsi:type="Property"/>
                  </operand>
                  <operand localId="333" locator="321:24-321:68" xsi:type="List">
                     <element localId="329" locator="321:26-321:32" valueType="t:String" value="draft" xsi:type="Literal"/>
                     <element localId="330" locator="321:35-321:42" valueType="t:String" value="active" xsi:type="Literal"/>
                     <element localId="331" locator="321:45-321:53" valueType="t:String" value="on-hold" xsi:type="Literal"/>
                     <element localId="332" locator="321:56-321:66" valueType="t:String" value="completed" xsi:type="Literal"/>
                  </operand>
               </operand>
               <operand localId="337" locator="322:11-322:37" xsi:type="Not">
                  <operand locator="322:11-322:37" xsi:type="IsTrue">
                     <operand name="ToBoolean" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand localId="336" locator="322:11-322:25" path="doNotPerform" scope="MR" xsi:type="Property"/>
                     </operand>
                  </operand>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="352" locator="331:1-333:78" name="Post Exposure Prophylaxis" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.G1.DE1 Post Exposure Prophylaxis"/>
            <a:t name="activity" value="NACHC.G1 Pep"/>
            <a:t name="description" value="Concepts and Procedures Identifying Post Exposure Prophylaxis"/>
            <a:s r="352">
               <a:s>//return MR.medication as FHIR.CodeableConcept


/*
  @dataElement: NACHC.G1.DE1 Post Exposure Prophylaxis
  @activity: NACHC.G1 Pep
  @description: Concepts and Procedures Identifying Post Exposure Prophylaxis
*/
define &quot;Post Exposure Prophylaxis&quot;:
  </a:s>
               <a:s r="351">
                  <a:s>
                     <a:s r="342">
                        <a:s r="341">
                           <a:s r="341">
                              <a:s>[Procedure: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Post Exposure Prophylaxis Codes&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> P</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="350">
                     <a:s>where </a:s>
                     <a:s r="350">
                        <a:s r="344">
                           <a:s r="343">
                              <a:s>P</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="344">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="349">
                           <a:s>{ </a:s>
                           <a:s r="345">
                              <a:s>'preparation'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="346">
                              <a:s>'in-progress'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="347">
                              <a:s>'on-hold'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="348">
                              <a:s>'completed'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="351" locator="332:3-333:78" xsi:type="Query">
            <source localId="342" locator="332:3-332:53" alias="P">
               <expression localId="341" locator="332:3-332:51" dataType="fhir:Procedure" templateId="http://hl7.org/fhir/StructureDefinition/Procedure" codeProperty="code" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="332:15-332:50" name="Post Exposure Prophylaxis Codes" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="350" locator="333:5-333:78" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="344" locator="333:11-333:18" path="status" scope="P" xsi:type="Property"/>
               </operand>
               <operand localId="349" locator="333:23-333:78" xsi:type="List">
                  <element localId="345" locator="333:25-333:37" valueType="t:String" value="preparation" xsi:type="Literal"/>
                  <element localId="346" locator="333:40-333:52" valueType="t:String" value="in-progress" xsi:type="Literal"/>
                  <element localId="347" locator="333:55-333:63" valueType="t:String" value="on-hold" xsi:type="Literal"/>
                  <element localId="348" locator="333:66-333:76" valueType="t:String" value="completed" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="354" locator="342:1-343:69" name="Prep Dispensed Medications" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.G2.DE26 Prep Dispensed Medications"/>
            <a:t name="activity" value="NACHC.G2 Prep"/>
            <a:t name="description" value="List of Medications Provisioned and Supplied for Non-Occupational Pre Exposure Prophylaxis"/>
            <a:s r="354">
               <a:s>//return P.code


/*
  @dataElement: NACHC.G2.DE26 Prep Dispensed Medications
  @activity: NACHC.G2 Prep
  @description: List of Medications Provisioned and Supplied for Non-Occupational Pre Exposure Prophylaxis
*/
define &quot;Prep Dispensed Medications&quot;:
  </a:s>
               <a:s r="353">
                  <a:s>[MedicationDispense: </a:s>
                  <a:s>
                     <a:s>Cx.&quot;Prep Dispensed Medications Codes Grouper&quot;</a:s>
                  </a:s>
                  <a:s>]</a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="353" locator="343:3-343:69" dataType="fhir:MedicationDispense" templateId="http://hl7.org/fhir/StructureDefinition/MedicationDispense" codeProperty="medication" codeComparator="in" xsi:type="Retrieve">
            <codes locator="343:24-343:68" name="Prep Dispensed Medications Codes Grouper" libraryName="Cx" xsi:type="ValueSetRef"/>
         </expression>
      </def>
      <def localId="370" locator="350:1-353:37" name="Prep Medication Prescriptions" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.G2.DE1 Prep Medication Prescriptions"/>
            <a:t name="activity" value="NACHC.G2 Prep"/>
            <a:t name="description" value="List of Medication Prescriptions for Non-Occupational Pre Exposure Prophylaxis"/>
            <a:s r="370">
               <a:s>/*
  @dataElement: NACHC.G2.DE1 Prep Medication Prescriptions
  @activity: NACHC.G2 Prep
  @description: List of Medication Prescriptions for Non-Occupational Pre Exposure Prophylaxis
*/
define &quot;Prep Medication Prescriptions&quot;:
  </a:s>
               <a:s r="369">
                  <a:s>
                     <a:s r="356">
                        <a:s r="355">
                           <a:s r="355">
                              <a:s>[MedicationRequest: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Prep Medication Prescriptions Codes Grouper&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> MR</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="368">
                     <a:s>where </a:s>
                     <a:s r="368">
                        <a:s r="364">
                           <a:s r="358">
                              <a:s r="357">
                                 <a:s>MR</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="358">
                                 <a:s>status</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="363">
                              <a:s>{ </a:s>
                              <a:s r="359">
                                 <a:s>'draft'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="360">
                                 <a:s>'active'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="361">
                                 <a:s>'on-hold'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="362">
                                 <a:s>'completed'</a:s>
                              </a:s>
                              <a:s> }</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
      and </a:s>
                        <a:s r="367">
                           <a:s r="366">
                              <a:s r="365">
                                 <a:s>MR</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="366">
                                 <a:s>doNotPerform</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is not true</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="369" locator="351:3-353:37" xsi:type="Query">
            <source localId="356" locator="351:3-351:74" alias="MR">
               <expression localId="355" locator="351:3-351:71" dataType="fhir:MedicationRequest" templateId="http://hl7.org/fhir/StructureDefinition/MedicationRequest" codeProperty="medication" codeComparator="in" xsi:type="Retrieve">
                  <codes locator="351:23-351:70" name="Prep Medication Prescriptions Codes Grouper" libraryName="Cx" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where localId="368" locator="352:5-353:37" xsi:type="And">
               <operand localId="364" locator="352:11-352:68" xsi:type="In">
                  <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="358" locator="352:11-352:19" path="status" scope="MR" xsi:type="Property"/>
                  </operand>
                  <operand localId="363" locator="352:24-352:68" xsi:type="List">
                     <element localId="359" locator="352:26-352:32" valueType="t:String" value="draft" xsi:type="Literal"/>
                     <element localId="360" locator="352:35-352:42" valueType="t:String" value="active" xsi:type="Literal"/>
                     <element localId="361" locator="352:45-352:53" valueType="t:String" value="on-hold" xsi:type="Literal"/>
                     <element localId="362" locator="352:56-352:66" valueType="t:String" value="completed" xsi:type="Literal"/>
                  </operand>
               </operand>
               <operand localId="367" locator="353:11-353:37" xsi:type="Not">
                  <operand locator="353:11-353:37" xsi:type="IsTrue">
                     <operand name="ToBoolean" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand localId="366" locator="353:11-353:25" path="doNotPerform" scope="MR" xsi:type="Property"/>
                     </operand>
                  </operand>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="381" locator="362:1-364:57" name="Patient Currently Pregnant" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE3 Patient Currently Pregnant"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Whether the patient is currently pregnant?"/>
            <a:s r="381">
               <a:s>//return MR.medication as FHIR.CodeableConcept


/*
  @dataElement: NACHC.H1.DE3 Patient Currently Pregnant
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient is currently pregnant?
*/
define &quot;Patient Currently Pregnant&quot;:
  </a:s>
               <a:s r="380">
                  <a:s>
                     <a:s r="372">
                        <a:s r="371">
                           <a:s r="371">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Patient Currently Pregnant&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="379">
                     <a:s>where </a:s>
                     <a:s r="379">
                        <a:s r="374">
                           <a:s r="373">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="374">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="378">
                           <a:s>{ </a:s>
                           <a:s r="375">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="376">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="377">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="380" locator="363:3-364:57" xsi:type="Query">
            <source localId="372" locator="363:3-363:50" alias="O">
               <expression localId="371" locator="363:3-363:48" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="363:17-363:47" name="Patient Currently Pregnant" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="379" locator="364:5-364:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="374" locator="364:11-364:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="378" locator="364:23-364:57" xsi:type="List">
                  <element localId="375" locator="364:25-364:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="376" locator="364:34-364:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="377" locator="364:45-364:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="392" locator="372:1-374:57" name="Patient Diagnosed with Chlamydia" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE7 Patient Diagnosed with Chlamydia"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Whether the patient has been diagnosed with Chlamydia?"/>
            <a:s r="392">
               <a:s>/*
  @dataElement: NACHC.H1.DE7 Patient Diagnosed with Chlamydia
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has been diagnosed with Chlamydia?
*/
define &quot;Patient Diagnosed with Chlamydia&quot;:
  </a:s>
               <a:s r="391">
                  <a:s>
                     <a:s r="383">
                        <a:s r="382">
                           <a:s r="382">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Patient Diagnosed with Chlamydia&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="390">
                     <a:s>where </a:s>
                     <a:s r="390">
                        <a:s r="385">
                           <a:s r="384">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="385">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="389">
                           <a:s>{ </a:s>
                           <a:s r="386">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="387">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="388">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="391" locator="373:3-374:57" xsi:type="Query">
            <source localId="383" locator="373:3-373:56" alias="O">
               <expression localId="382" locator="373:3-373:54" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="373:17-373:53" name="Patient Diagnosed with Chlamydia" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="390" locator="374:5-374:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="385" locator="374:11-374:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="389" locator="374:23-374:57" xsi:type="List">
                  <element localId="386" locator="374:25-374:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="387" locator="374:34-374:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="388" locator="374:45-374:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="403" locator="382:1-384:57" name="Patient Diagnosed with Gonorrhea" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE6 Patient Diagnosed with Gonorrhea"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Whether the patient has been diagnosed with Gonorrhea?"/>
            <a:s r="403">
               <a:s>/*
  @dataElement: NACHC.H1.DE6 Patient Diagnosed with Gonorrhea
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has been diagnosed with Gonorrhea?
*/
define &quot;Patient Diagnosed with Gonorrhea&quot;:
  </a:s>
               <a:s r="402">
                  <a:s>
                     <a:s r="394">
                        <a:s r="393">
                           <a:s r="393">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Patient Diagnosed with Gonorrhea&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="401">
                     <a:s>where </a:s>
                     <a:s r="401">
                        <a:s r="396">
                           <a:s r="395">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="396">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="400">
                           <a:s>{ </a:s>
                           <a:s r="397">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="398">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="399">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="402" locator="383:3-384:57" xsi:type="Query">
            <source localId="394" locator="383:3-383:56" alias="O">
               <expression localId="393" locator="383:3-383:54" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="383:17-383:53" name="Patient Diagnosed with Gonorrhea" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="401" locator="384:5-384:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="396" locator="384:11-384:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="400" locator="384:23-384:57" xsi:type="List">
                  <element localId="397" locator="384:25-384:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="398" locator="384:34-384:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="399" locator="384:45-384:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="414" locator="392:1-394:57" name="Patient Diagnosed with HCV" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE4 Patient Diagnosed with HCV"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Whether the patient has been diagnosed with HCV?"/>
            <a:s r="414">
               <a:s>/*
  @dataElement: NACHC.H1.DE4 Patient Diagnosed with HCV
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has been diagnosed with HCV?
*/
define &quot;Patient Diagnosed with HCV&quot;:
  </a:s>
               <a:s r="413">
                  <a:s>
                     <a:s r="405">
                        <a:s r="404">
                           <a:s r="404">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Patient Diagnosed with HCV&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="412">
                     <a:s>where </a:s>
                     <a:s r="412">
                        <a:s r="407">
                           <a:s r="406">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="407">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="411">
                           <a:s>{ </a:s>
                           <a:s r="408">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="409">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="410">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="413" locator="393:3-394:57" xsi:type="Query">
            <source localId="405" locator="393:3-393:50" alias="O">
               <expression localId="404" locator="393:3-393:48" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="393:17-393:47" name="Patient Diagnosed with HCV" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="412" locator="394:5-394:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="407" locator="394:11-394:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="411" locator="394:23-394:57" xsi:type="List">
                  <element localId="408" locator="394:25-394:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="409" locator="394:34-394:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="410" locator="394:45-394:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="425" locator="402:1-404:57" name="Patient Diagnosed with Syphilis" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE5 Patient Diagnosed with Syphilis"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Whether the patient has been diagnosed with Syphilis?"/>
            <a:s r="425">
               <a:s>/*
  @dataElement: NACHC.H1.DE5 Patient Diagnosed with Syphilis
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has been diagnosed with Syphilis?
*/
define &quot;Patient Diagnosed with Syphilis&quot;:
  </a:s>
               <a:s r="424">
                  <a:s>
                     <a:s r="416">
                        <a:s r="415">
                           <a:s r="415">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Patient Diagnosed with Syphilis&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="423">
                     <a:s>where </a:s>
                     <a:s r="423">
                        <a:s r="418">
                           <a:s r="417">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="418">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="422">
                           <a:s>{ </a:s>
                           <a:s r="419">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="420">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="421">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="424" locator="403:3-404:57" xsi:type="Query">
            <source localId="416" locator="403:3-403:55" alias="O">
               <expression localId="415" locator="403:3-403:53" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="403:17-403:52" name="Patient Diagnosed with Syphilis" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="423" locator="404:5-404:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="418" locator="404:11-404:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="422" locator="404:23-404:57" xsi:type="List">
                  <element localId="419" locator="404:25-404:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="420" locator="404:34-404:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="421" locator="404:45-404:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="436" locator="412:1-414:57" name="Patient has used Injection Drugs" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE8 Patient has used Injection Drugs"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Whether the patient has been using Injection Drugs?"/>
            <a:s r="436">
               <a:s>/*
  @dataElement: NACHC.H1.DE8 Patient has used Injection Drugs
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has been using Injection Drugs?
*/
define &quot;Patient has used Injection Drugs&quot;:
  </a:s>
               <a:s r="435">
                  <a:s>
                     <a:s r="427">
                        <a:s r="426">
                           <a:s r="426">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Patient has used Injection Drugs&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="434">
                     <a:s>where </a:s>
                     <a:s r="434">
                        <a:s r="429">
                           <a:s r="428">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="429">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="433">
                           <a:s>{ </a:s>
                           <a:s r="430">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="431">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="432">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="435" locator="413:3-414:57" xsi:type="Query">
            <source localId="427" locator="413:3-413:56" alias="O">
               <expression localId="426" locator="413:3-413:54" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="413:17-413:53" name="Patient has used Injection Drugs" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="434" locator="414:5-414:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="429" locator="414:11-414:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="433" locator="414:23-414:57" xsi:type="List">
                  <element localId="430" locator="414:25-414:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="431" locator="414:34-414:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="432" locator="414:45-414:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="447" locator="422:1-424:57" name="Previous experience with PREP" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE10 Previous experience with PREP"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Whether the patient has previously been given PREP?"/>
            <a:s r="447">
               <a:s>/*
  @dataElement: NACHC.H1.DE10 Previous experience with PREP
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has previously been given PREP?
*/
define &quot;Previous experience with PREP&quot;:
  </a:s>
               <a:s r="446">
                  <a:s>
                     <a:s r="438">
                        <a:s r="437">
                           <a:s r="437">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Previous experience with PREP&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="445">
                     <a:s>where </a:s>
                     <a:s r="445">
                        <a:s r="440">
                           <a:s r="439">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="440">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="444">
                           <a:s>{ </a:s>
                           <a:s r="441">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="442">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="443">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="446" locator="423:3-424:57" xsi:type="Query">
            <source localId="438" locator="423:3-423:53" alias="O">
               <expression localId="437" locator="423:3-423:51" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="423:17-423:50" name="Previous experience with PREP" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="445" locator="424:5-424:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="440" locator="424:11-424:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="444" locator="424:23-424:57" xsi:type="List">
                  <element localId="441" locator="424:25-424:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="442" locator="424:34-424:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="443" locator="424:45-424:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="458" locator="432:1-434:57" name="Previous HIV Diagnosis" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE2 Previous HIV Diagnosis"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Whether the patient has previously been diagnosed with HIV?"/>
            <a:s r="458">
               <a:s>/*
  @dataElement: NACHC.H1.DE2 Previous HIV Diagnosis
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has previously been diagnosed with HIV?
*/
define &quot;Previous HIV Diagnosis&quot;:
  </a:s>
               <a:s r="457">
                  <a:s>
                     <a:s r="449">
                        <a:s r="448">
                           <a:s r="448">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Previous HIV Diagnosis&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="456">
                     <a:s>where </a:s>
                     <a:s r="456">
                        <a:s r="451">
                           <a:s r="450">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="451">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="455">
                           <a:s>{ </a:s>
                           <a:s r="452">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="453">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="454">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="457" locator="433:3-434:57" xsi:type="Query">
            <source localId="449" locator="433:3-433:46" alias="O">
               <expression localId="448" locator="433:3-433:44" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="433:17-433:43" name="Previous HIV Diagnosis" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="456" locator="434:5-434:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="451" locator="434:11-434:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="455" locator="434:23-434:57" xsi:type="List">
                  <element localId="452" locator="434:25-434:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="453" locator="434:34-434:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="454" locator="434:45-434:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="469" locator="442:1-444:57" name="Previous HIV Screening" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE1 Previous HIV Screening"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Whether the patient has previously been screened for HIV?"/>
            <a:s r="469">
               <a:s>/*
  @dataElement: NACHC.H1.DE1 Previous HIV Screening
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient has previously been screened for HIV?
*/
define &quot;Previous HIV Screening&quot;:
  </a:s>
               <a:s r="468">
                  <a:s>
                     <a:s r="460">
                        <a:s r="459">
                           <a:s r="459">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Previous HIV Screening&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="467">
                     <a:s>where </a:s>
                     <a:s r="467">
                        <a:s r="462">
                           <a:s r="461">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="462">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="466">
                           <a:s>{ </a:s>
                           <a:s r="463">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="464">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="465">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="468" locator="443:3-444:57" xsi:type="Query">
            <source localId="460" locator="443:3-443:46" alias="O">
               <expression localId="459" locator="443:3-443:44" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="443:17-443:43" name="Previous HIV Screening" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="467" locator="444:5-444:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="462" locator="444:11-444:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="466" locator="444:23-444:57" xsi:type="List">
                  <element localId="463" locator="444:25-444:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="464" locator="444:34-444:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="465" locator="444:45-444:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="480" locator="452:1-454:57" name="Seeking STD Treatment" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE9 Seeking STD Treatment"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Whether the patient is currently seeking evaluation and treatment of an STD?"/>
            <a:s r="480">
               <a:s>/*
  @dataElement: NACHC.H1.DE9 Seeking STD Treatment
  @activity: NACHC.H1 Risk Factors
  @description: Whether the patient is currently seeking evaluation and treatment of an STD?
*/
define &quot;Seeking STD Treatment&quot;:
  </a:s>
               <a:s r="479">
                  <a:s>
                     <a:s r="471">
                        <a:s r="470">
                           <a:s r="470">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Seeking STD Treatment&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="478">
                     <a:s>where </a:s>
                     <a:s r="478">
                        <a:s r="473">
                           <a:s r="472">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="473">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="477">
                           <a:s>{ </a:s>
                           <a:s r="474">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="475">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="476">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="479" locator="453:3-454:57" xsi:type="Query">
            <source localId="471" locator="453:3-453:45" alias="O">
               <expression localId="470" locator="453:3-453:43" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="453:17-453:42" name="Seeking STD Treatment" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="478" locator="454:5-454:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="473" locator="454:11-454:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="477" locator="454:23-454:57" xsi:type="List">
                  <element localId="474" locator="454:25-454:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="475" locator="454:34-454:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="476" locator="454:45-454:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="491" locator="462:1-464:57" name="Sexual Activity - Coercion" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE22 Sexual Activity - Coercion"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Have you ever been coerced or pressured to have sex?"/>
            <a:s r="491">
               <a:s>/*
  @dataElement: NACHC.H1.DE22 Sexual Activity - Coercion
  @activity: NACHC.H1 Risk Factors
  @description: Have you ever been coerced or pressured to have sex?
*/
define &quot;Sexual Activity - Coercion&quot;:
  </a:s>
               <a:s r="490">
                  <a:s>
                     <a:s r="482">
                        <a:s r="481">
                           <a:s r="481">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Coercion&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="489">
                     <a:s>where </a:s>
                     <a:s r="489">
                        <a:s r="484">
                           <a:s r="483">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="484">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="488">
                           <a:s>{ </a:s>
                           <a:s r="485">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="486">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="487">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="490" locator="463:3-464:57" xsi:type="Query">
            <source localId="482" locator="463:3-463:50" alias="O">
               <expression localId="481" locator="463:3-463:48" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="463:17-463:47" name="Sexual Activity - Coercion" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="489" locator="464:5-464:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="484" locator="464:11-464:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="488" locator="464:23-464:57" xsi:type="List">
                  <element localId="485" locator="464:25-464:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="486" locator="464:34-464:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="487" locator="464:45-464:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="502" locator="472:1-474:57" name="Sexual Activity - Drug or Alcohol Use" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE20 Sexual Activity - Drug or Alcohol Use"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Have you or any of your partners used alcohol or drugs when you had sex?"/>
            <a:s r="502">
               <a:s>/*
  @dataElement: NACHC.H1.DE20 Sexual Activity - Drug or Alcohol Use
  @activity: NACHC.H1 Risk Factors
  @description: Have you or any of your partners used alcohol or drugs when you had sex?
*/
define &quot;Sexual Activity - Drug or Alcohol Use&quot;:
  </a:s>
               <a:s r="501">
                  <a:s>
                     <a:s r="493">
                        <a:s r="492">
                           <a:s r="492">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Drug or Alcohol Use&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="500">
                     <a:s>where </a:s>
                     <a:s r="500">
                        <a:s r="495">
                           <a:s r="494">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="495">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="499">
                           <a:s>{ </a:s>
                           <a:s r="496">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="497">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="498">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="501" locator="473:3-474:57" xsi:type="Query">
            <source localId="493" locator="473:3-473:61" alias="O">
               <expression localId="492" locator="473:3-473:59" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="473:17-473:58" name="Sexual Activity - Drug or Alcohol Use" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="500" locator="474:5-474:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="495" locator="474:11-474:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="499" locator="474:23-474:57" xsi:type="List">
                  <element localId="496" locator="474:25-474:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="497" locator="474:34-474:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="498" locator="474:45-474:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="513" locator="482:1-484:57" name="Sexual Activity - Exchanged for Sex" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE21 Sexual Activity - Exchanged for Sex"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Have you ever exchanged sex for drugs or money?"/>
            <a:s r="513">
               <a:s>/*
  @dataElement: NACHC.H1.DE21 Sexual Activity - Exchanged for Sex
  @activity: NACHC.H1 Risk Factors
  @description: Have you ever exchanged sex for drugs or money?
*/
define &quot;Sexual Activity - Exchanged for Sex&quot;:
  </a:s>
               <a:s r="512">
                  <a:s>
                     <a:s r="504">
                        <a:s r="503">
                           <a:s r="503">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Exchanged for Sex&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="511">
                     <a:s>where </a:s>
                     <a:s r="511">
                        <a:s r="506">
                           <a:s r="505">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="506">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="510">
                           <a:s>{ </a:s>
                           <a:s r="507">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="508">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="509">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="512" locator="483:3-484:57" xsi:type="Query">
            <source localId="504" locator="483:3-483:59" alias="O">
               <expression localId="503" locator="483:3-483:57" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="483:17-483:56" name="Sexual Activity - Exchanged for Sex" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="511" locator="484:5-484:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="506" locator="484:11-484:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="510" locator="484:23-484:57" xsi:type="List">
                  <element localId="507" locator="484:25-484:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="508" locator="484:34-484:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="509" locator="484:45-484:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="524" locator="492:1-494:57" name="Sexual Activity - History" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE12 Sexual Activity - History"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Have you ever been sexually active?"/>
            <a:s r="524">
               <a:s>/*
  @dataElement: NACHC.H1.DE12 Sexual Activity - History
  @activity: NACHC.H1 Risk Factors
  @description: Have you ever been sexually active?
*/
define &quot;Sexual Activity - History&quot;:
  </a:s>
               <a:s r="523">
                  <a:s>
                     <a:s r="515">
                        <a:s r="514">
                           <a:s r="514">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - History&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="522">
                     <a:s>where </a:s>
                     <a:s r="522">
                        <a:s r="517">
                           <a:s r="516">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="517">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="521">
                           <a:s>{ </a:s>
                           <a:s r="518">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="519">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="520">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="523" locator="493:3-494:57" xsi:type="Query">
            <source localId="515" locator="493:3-493:49" alias="O">
               <expression localId="514" locator="493:3-493:47" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="493:17-493:46" name="Sexual Activity - History" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="522" locator="494:5-494:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="517" locator="494:11-494:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="521" locator="494:23-494:57" xsi:type="List">
                  <element localId="518" locator="494:25-494:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="519" locator="494:34-494:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="520" locator="494:45-494:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="535" locator="502:1-504:57" name="Sexual Activity - Kind of Sex - Anal" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE23 Sexual Activity - Kind of Sex - Anal"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="In the past 3 months have you had anal sex?"/>
            <a:s r="535">
               <a:s>/*
  @dataElement: NACHC.H1.DE23 Sexual Activity - Kind of Sex - Anal
  @activity: NACHC.H1 Risk Factors
  @description: In the past 3 months have you had anal sex?
*/
define &quot;Sexual Activity - Kind of Sex - Anal&quot;:
  </a:s>
               <a:s r="534">
                  <a:s>
                     <a:s r="526">
                        <a:s r="525">
                           <a:s r="525">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Kind of Sex - Anal&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="533">
                     <a:s>where </a:s>
                     <a:s r="533">
                        <a:s r="528">
                           <a:s r="527">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="528">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="532">
                           <a:s>{ </a:s>
                           <a:s r="529">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="530">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="531">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="534" locator="503:3-504:57" xsi:type="Query">
            <source localId="526" locator="503:3-503:60" alias="O">
               <expression localId="525" locator="503:3-503:58" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="503:17-503:57" name="Sexual Activity - Kind of Sex - Anal" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="533" locator="504:5-504:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="528" locator="504:11-504:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="532" locator="504:23-504:57" xsi:type="List">
                  <element localId="529" locator="504:25-504:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="530" locator="504:34-504:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="531" locator="504:45-504:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="546" locator="512:1-514:57" name="Sexual Activity - Kind of Sex - Vaginal" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE26 Sexual Activity - Kind of Sex - Vaginal"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="In the past 3 months have you had vaginal sex?"/>
            <a:s r="546">
               <a:s>/*
  @dataElement: NACHC.H1.DE26 Sexual Activity - Kind of Sex - Vaginal
  @activity: NACHC.H1 Risk Factors
  @description: In the past 3 months have you had vaginal sex?
*/
define &quot;Sexual Activity - Kind of Sex - Vaginal&quot;:
  </a:s>
               <a:s r="545">
                  <a:s>
                     <a:s r="537">
                        <a:s r="536">
                           <a:s r="536">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Kind of Sex - Vaginal&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="544">
                     <a:s>where </a:s>
                     <a:s r="544">
                        <a:s r="539">
                           <a:s r="538">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="539">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="543">
                           <a:s>{ </a:s>
                           <a:s r="540">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="541">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="542">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="545" locator="513:3-514:57" xsi:type="Query">
            <source localId="537" locator="513:3-513:63" alias="O">
               <expression localId="536" locator="513:3-513:61" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="513:17-513:60" name="Sexual Activity - Kind of Sex - Vaginal" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="544" locator="514:5-514:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="539" locator="514:11-514:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="543" locator="514:23-514:57" xsi:type="List">
                  <element localId="540" locator="514:25-514:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="541" locator="514:34-514:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="542" locator="514:45-514:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="557" locator="522:1-524:57" name="Sexual Activity - Male - Kind of Sex - Insertive Anal" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE25 Sexual Activity - Male - Kind of Sex - Insertive Anal"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="If Male: In the past 3 months have you had insertive anal sex?"/>
            <a:s r="557">
               <a:s>/*
  @dataElement: NACHC.H1.DE25 Sexual Activity - Male - Kind of Sex - Insertive Anal
  @activity: NACHC.H1 Risk Factors
  @description: If Male: In the past 3 months have you had insertive anal sex?
*/
define &quot;Sexual Activity - Male - Kind of Sex - Insertive Anal&quot;:
  </a:s>
               <a:s r="556">
                  <a:s>
                     <a:s r="548">
                        <a:s r="547">
                           <a:s r="547">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Male - Kind of Sex - Insertive Anal&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="555">
                     <a:s>where </a:s>
                     <a:s r="555">
                        <a:s r="550">
                           <a:s r="549">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="550">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="554">
                           <a:s>{ </a:s>
                           <a:s r="551">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="552">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="553">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="556" locator="523:3-524:57" xsi:type="Query">
            <source localId="548" locator="523:3-523:77" alias="O">
               <expression localId="547" locator="523:3-523:75" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="523:17-523:74" name="Sexual Activity - Male - Kind of Sex - Insertive Anal" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="555" locator="524:5-524:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="550" locator="524:11-524:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="554" locator="524:23-524:57" xsi:type="List">
                  <element localId="551" locator="524:25-524:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="552" locator="524:34-524:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="553" locator="524:45-524:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="568" locator="532:1-534:57" name="Sexual Activity - Male - Kind of Sex - Receptive Anal" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE24 Sexual Activity - Male - Kind of Sex - Receptive Anal"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="If Male: In the past 3 months have you had receptive anal sex?"/>
            <a:s r="568">
               <a:s>/*
  @dataElement: NACHC.H1.DE24 Sexual Activity - Male - Kind of Sex - Receptive Anal
  @activity: NACHC.H1 Risk Factors
  @description: If Male: In the past 3 months have you had receptive anal sex?
*/
define &quot;Sexual Activity - Male - Kind of Sex - Receptive Anal&quot;:
  </a:s>
               <a:s r="567">
                  <a:s>
                     <a:s r="559">
                        <a:s r="558">
                           <a:s r="558">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Male - Kind of Sex - Receptive Anal&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="566">
                     <a:s>where </a:s>
                     <a:s r="566">
                        <a:s r="561">
                           <a:s r="560">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="561">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="565">
                           <a:s>{ </a:s>
                           <a:s r="562">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="563">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="564">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="567" locator="533:3-534:57" xsi:type="Query">
            <source localId="559" locator="533:3-533:77" alias="O">
               <expression localId="558" locator="533:3-533:75" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="533:17-533:74" name="Sexual Activity - Male - Kind of Sex - Receptive Anal" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="566" locator="534:5-534:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="561" locator="534:11-534:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="565" locator="534:23-534:57" xsi:type="List">
                  <element localId="562" locator="534:25-534:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="563" locator="534:34-534:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="564" locator="534:45-534:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="579" locator="542:1-544:57" name="Sexual Activity - Men" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE13 Sexual Activity - Men"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Do you have sex with men?"/>
            <a:s r="579">
               <a:s>/*
  @dataElement: NACHC.H1.DE13 Sexual Activity - Men
  @activity: NACHC.H1 Risk Factors
  @description: Do you have sex with men?
*/
define &quot;Sexual Activity - Men&quot;:
  </a:s>
               <a:s r="578">
                  <a:s>
                     <a:s r="570">
                        <a:s r="569">
                           <a:s r="569">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Men&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="577">
                     <a:s>where </a:s>
                     <a:s r="577">
                        <a:s r="572">
                           <a:s r="571">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="572">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="576">
                           <a:s>{ </a:s>
                           <a:s r="573">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="574">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="575">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="578" locator="543:3-544:57" xsi:type="Query">
            <source localId="570" locator="543:3-543:45" alias="O">
               <expression localId="569" locator="543:3-543:43" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="543:17-543:42" name="Sexual Activity - Men" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="577" locator="544:5-544:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="572" locator="544:11-544:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="576" locator="544:23-544:57" xsi:type="List">
                  <element localId="573" locator="544:25-544:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="574" locator="544:34-544:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="575" locator="544:45-544:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="590" locator="552:1-554:57" name="Sexual Activity - New Partner Past 3 Months" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE16 Sexual Activity - New Partner Past 3 Months"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="In the past 3 months, have you had sex with someone you didn’t know or had just met?"/>
            <a:s r="590">
               <a:s>/*
  @dataElement: NACHC.H1.DE16 Sexual Activity - New Partner Past 3 Months
  @activity: NACHC.H1 Risk Factors
  @description: In the past 3 months, have you had sex with someone you didn’t know or had just met?
*/
define &quot;Sexual Activity - New Partner Past 3 Months&quot;:
  </a:s>
               <a:s r="589">
                  <a:s>
                     <a:s r="581">
                        <a:s r="580">
                           <a:s r="580">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - New Partner Past 3 Months&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="588">
                     <a:s>where </a:s>
                     <a:s r="588">
                        <a:s r="583">
                           <a:s r="582">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="583">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="587">
                           <a:s>{ </a:s>
                           <a:s r="584">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="585">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="586">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="589" locator="553:3-554:57" xsi:type="Query">
            <source localId="581" locator="553:3-553:67" alias="O">
               <expression localId="580" locator="553:3-553:65" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="553:17-553:64" name="Sexual Activity - New Partner Past 3 Months" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="588" locator="554:5-554:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="583" locator="554:11-554:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="587" locator="554:23-554:57" xsi:type="List">
                  <element localId="584" locator="554:25-554:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="585" locator="554:34-554:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="586" locator="554:45-554:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="601" locator="562:1-564:57" name="Sexual Activity - Number of Partners" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE15 Sexual Activity - Number of Partners"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Have you had more than 1 sexual partner since last being tested for HIV?"/>
            <a:s r="601">
               <a:s>/*
  @dataElement: NACHC.H1.DE15 Sexual Activity - Number of Partners
  @activity: NACHC.H1 Risk Factors
  @description: Have you had more than 1 sexual partner since last being tested for HIV?
*/
define &quot;Sexual Activity - Number of Partners&quot;:
  </a:s>
               <a:s r="600">
                  <a:s>
                     <a:s r="592">
                        <a:s r="591">
                           <a:s r="591">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Number of Partners&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="599">
                     <a:s>where </a:s>
                     <a:s r="599">
                        <a:s r="594">
                           <a:s r="593">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="594">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="598">
                           <a:s>{ </a:s>
                           <a:s r="595">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="596">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="597">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="600" locator="563:3-564:57" xsi:type="Query">
            <source localId="592" locator="563:3-563:60" alias="O">
               <expression localId="591" locator="563:3-563:58" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="563:17-563:57" name="Sexual Activity - Number of Partners" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="599" locator="564:5-564:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="594" locator="564:11-564:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="598" locator="564:23-564:57" xsi:type="List">
                  <element localId="595" locator="564:25-564:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="596" locator="564:34-564:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="597" locator="564:45-564:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="612" locator="572:1-574:57" name="Sexual Activity - Partners History" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE17 Sexual Activity - Partners History"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Do you know whether your partner has other sexual partners?"/>
            <a:s r="612">
               <a:s>/*
  @dataElement: NACHC.H1.DE17 Sexual Activity - Partners History
  @activity: NACHC.H1 Risk Factors
  @description: Do you know whether your partner has other sexual partners?
*/
define &quot;Sexual Activity - Partners History&quot;:
  </a:s>
               <a:s r="611">
                  <a:s>
                     <a:s r="603">
                        <a:s r="602">
                           <a:s r="602">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Partners History&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="610">
                     <a:s>where </a:s>
                     <a:s r="610">
                        <a:s r="605">
                           <a:s r="604">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="605">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="609">
                           <a:s>{ </a:s>
                           <a:s r="606">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="607">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="608">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="611" locator="573:3-574:57" xsi:type="Query">
            <source localId="603" locator="573:3-573:58" alias="O">
               <expression localId="602" locator="573:3-573:56" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="573:17-573:55" name="Sexual Activity - Partners History" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="610" locator="574:5-574:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="605" locator="574:11-574:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="609" locator="574:23-574:57" xsi:type="List">
                  <element localId="606" locator="574:25-574:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="607" locator="574:34-574:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="608" locator="574:45-574:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="623" locator="582:1-584:57" name="Sexual Activity - Partners HIV History" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE19 Sexual Activity - Partners HIV History"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Do you know whether your partner has HIV?"/>
            <a:s r="623">
               <a:s>/*
  @dataElement: NACHC.H1.DE19 Sexual Activity - Partners HIV History
  @activity: NACHC.H1 Risk Factors
  @description: Do you know whether your partner has HIV?
*/
define &quot;Sexual Activity - Partners HIV History&quot;:
  </a:s>
               <a:s r="622">
                  <a:s>
                     <a:s r="614">
                        <a:s r="613">
                           <a:s r="613">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Partners HIV History&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="621">
                     <a:s>where </a:s>
                     <a:s r="621">
                        <a:s r="616">
                           <a:s r="615">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="616">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="620">
                           <a:s>{ </a:s>
                           <a:s r="617">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="618">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="619">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="622" locator="583:3-584:57" xsi:type="Query">
            <source localId="614" locator="583:3-583:62" alias="O">
               <expression localId="613" locator="583:3-583:60" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="583:17-583:59" name="Sexual Activity - Partners HIV History" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="621" locator="584:5-584:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="616" locator="584:11-584:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="620" locator="584:23-584:57" xsi:type="List">
                  <element localId="617" locator="584:25-584:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="618" locator="584:34-584:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="619" locator="584:45-584:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="634" locator="592:1-594:57" name="Sexual Activity - Partners Number of Partners" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE18 Sexual Activity - Partners Number of Partners"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Do you know whether your partner has had more than 1 sexual partner since their last HIV test?"/>
            <a:s r="634">
               <a:s>/*
  @dataElement: NACHC.H1.DE18 Sexual Activity - Partners Number of Partners
  @activity: NACHC.H1 Risk Factors
  @description: Do you know whether your partner has had more than 1 sexual partner since their last HIV test?
*/
define &quot;Sexual Activity - Partners Number of Partners&quot;:
  </a:s>
               <a:s r="633">
                  <a:s>
                     <a:s r="625">
                        <a:s r="624">
                           <a:s r="624">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Partners Number of Partners&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="632">
                     <a:s>where </a:s>
                     <a:s r="632">
                        <a:s r="627">
                           <a:s r="626">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="627">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="631">
                           <a:s>{ </a:s>
                           <a:s r="628">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="629">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="630">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="633" locator="593:3-594:57" xsi:type="Query">
            <source localId="625" locator="593:3-593:69" alias="O">
               <expression localId="624" locator="593:3-593:67" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="593:17-593:66" name="Sexual Activity - Partners Number of Partners" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="632" locator="594:5-594:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="627" locator="594:11-594:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="631" locator="594:23-594:57" xsi:type="List">
                  <element localId="628" locator="594:25-594:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="629" locator="594:34-594:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="630" locator="594:45-594:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="645" locator="602:1-604:57" name="Sexual Activity - Past Year" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE11 Sexual Activity - Past Year"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Have you been sexually active in the past year?"/>
            <a:s r="645">
               <a:s>/*
  @dataElement: NACHC.H1.DE11 Sexual Activity - Past Year
  @activity: NACHC.H1 Risk Factors
  @description: Have you been sexually active in the past year?
*/
define &quot;Sexual Activity - Past Year&quot;:
  </a:s>
               <a:s r="644">
                  <a:s>
                     <a:s r="636">
                        <a:s r="635">
                           <a:s r="635">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Past Year&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="643">
                     <a:s>where </a:s>
                     <a:s r="643">
                        <a:s r="638">
                           <a:s r="637">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="638">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="642">
                           <a:s>{ </a:s>
                           <a:s r="639">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="640">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="641">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="644" locator="603:3-604:57" xsi:type="Query">
            <source localId="636" locator="603:3-603:51" alias="O">
               <expression localId="635" locator="603:3-603:49" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="603:17-603:48" name="Sexual Activity - Past Year" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="643" locator="604:5-604:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="638" locator="604:11-604:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="642" locator="604:23-604:57" xsi:type="List">
                  <element localId="639" locator="604:25-604:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="640" locator="604:34-604:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="641" locator="604:45-604:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="656" locator="612:1-614:57" name="Sexual Activity - Women" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H1.DE14 Sexual Activity - Women"/>
            <a:t name="activity" value="NACHC.H1 Risk Factors"/>
            <a:t name="description" value="Do you have sex with women?"/>
            <a:s r="656">
               <a:s>/*
  @dataElement: NACHC.H1.DE14 Sexual Activity - Women
  @activity: NACHC.H1 Risk Factors
  @description: Do you have sex with women?
*/
define &quot;Sexual Activity - Women&quot;:
  </a:s>
               <a:s r="655">
                  <a:s>
                     <a:s r="647">
                        <a:s r="646">
                           <a:s r="646">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;Sexual Activity - Women&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="654">
                     <a:s>where </a:s>
                     <a:s r="654">
                        <a:s r="649">
                           <a:s r="648">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="649">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="653">
                           <a:s>{ </a:s>
                           <a:s r="650">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="651">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="652">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="655" locator="613:3-614:57" xsi:type="Query">
            <source localId="647" locator="613:3-613:47" alias="O">
               <expression localId="646" locator="613:3-613:45" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="613:17-613:44" name="Sexual Activity - Women" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="654" locator="614:5-614:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="649" locator="614:11-614:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="653" locator="614:23-614:57" xsi:type="List">
                  <element localId="650" locator="614:25-614:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="651" locator="614:34-614:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="652" locator="614:45-614:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="667" locator="622:1-624:57" name="DAST 10 Question 1" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE1 DAST 10 Question 1"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Have you used drugs other than those required for medical reasons?"/>
            <a:s r="667">
               <a:s>/*
  @dataElement: NACHC.H2.DE1 DAST 10 Question 1
  @activity: NACHC.H2 DAST 10
  @description: Have you used drugs other than those required for medical reasons?
*/
define &quot;DAST 10 Question 1&quot;:
  </a:s>
               <a:s r="666">
                  <a:s>
                     <a:s r="658">
                        <a:s r="657">
                           <a:s r="657">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Question 1&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="665">
                     <a:s>where </a:s>
                     <a:s r="665">
                        <a:s r="660">
                           <a:s r="659">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="660">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="664">
                           <a:s>{ </a:s>
                           <a:s r="661">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="662">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="663">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="666" locator="623:3-624:57" xsi:type="Query">
            <source localId="658" locator="623:3-623:42" alias="O">
               <expression localId="657" locator="623:3-623:40" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="623:17-623:39" name="DAST 10 Question 1" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="665" locator="624:5-624:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="660" locator="624:11-624:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="664" locator="624:23-624:57" xsi:type="List">
                  <element localId="661" locator="624:25-624:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="662" locator="624:34-624:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="663" locator="624:45-624:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="678" locator="632:1-634:57" name="DAST 10 Question 10" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE10 DAST 10 Question 10"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Have you had medical problems as a result of your drug use (e.g., memory loss, hepatitis, convulsions, bleeding, etc.)?"/>
            <a:s r="678">
               <a:s>/*
  @dataElement: NACHC.H2.DE10 DAST 10 Question 10
  @activity: NACHC.H2 DAST 10
  @description: Have you had medical problems as a result of your drug use (e.g., memory loss, hepatitis, convulsions, bleeding, etc.)?
*/
define &quot;DAST 10 Question 10&quot;:
  </a:s>
               <a:s r="677">
                  <a:s>
                     <a:s r="669">
                        <a:s r="668">
                           <a:s r="668">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Question 10&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="676">
                     <a:s>where </a:s>
                     <a:s r="676">
                        <a:s r="671">
                           <a:s r="670">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="671">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="675">
                           <a:s>{ </a:s>
                           <a:s r="672">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="673">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="674">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="677" locator="633:3-634:57" xsi:type="Query">
            <source localId="669" locator="633:3-633:43" alias="O">
               <expression localId="668" locator="633:3-633:41" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="633:17-633:40" name="DAST 10 Question 10" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="676" locator="634:5-634:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="671" locator="634:11-634:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="675" locator="634:23-634:57" xsi:type="List">
                  <element localId="672" locator="634:25-634:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="673" locator="634:34-634:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="674" locator="634:45-634:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="689" locator="642:1-644:57" name="DAST 10 Question 2" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE2 DAST 10 Question 2"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Do you use more than one drug at a time?"/>
            <a:s r="689">
               <a:s>/*
  @dataElement: NACHC.H2.DE2 DAST 10 Question 2
  @activity: NACHC.H2 DAST 10
  @description: Do you use more than one drug at a time?
*/
define &quot;DAST 10 Question 2&quot;:
  </a:s>
               <a:s r="688">
                  <a:s>
                     <a:s r="680">
                        <a:s r="679">
                           <a:s r="679">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Question 2&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="687">
                     <a:s>where </a:s>
                     <a:s r="687">
                        <a:s r="682">
                           <a:s r="681">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="682">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="686">
                           <a:s>{ </a:s>
                           <a:s r="683">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="684">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="685">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="688" locator="643:3-644:57" xsi:type="Query">
            <source localId="680" locator="643:3-643:42" alias="O">
               <expression localId="679" locator="643:3-643:40" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="643:17-643:39" name="DAST 10 Question 2" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="687" locator="644:5-644:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="682" locator="644:11-644:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="686" locator="644:23-644:57" xsi:type="List">
                  <element localId="683" locator="644:25-644:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="684" locator="644:34-644:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="685" locator="644:45-644:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="700" locator="652:1-654:57" name="DAST 10 Question 3" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE3 DAST 10 Question 3"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Are you always able to stop using drugs when you want to?"/>
            <a:s r="700">
               <a:s>/*
  @dataElement: NACHC.H2.DE3 DAST 10 Question 3
  @activity: NACHC.H2 DAST 10
  @description: Are you always able to stop using drugs when you want to?
*/
define &quot;DAST 10 Question 3&quot;:
  </a:s>
               <a:s r="699">
                  <a:s>
                     <a:s r="691">
                        <a:s r="690">
                           <a:s r="690">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Question 3&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="698">
                     <a:s>where </a:s>
                     <a:s r="698">
                        <a:s r="693">
                           <a:s r="692">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="693">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="697">
                           <a:s>{ </a:s>
                           <a:s r="694">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="695">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="696">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="699" locator="653:3-654:57" xsi:type="Query">
            <source localId="691" locator="653:3-653:42" alias="O">
               <expression localId="690" locator="653:3-653:40" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="653:17-653:39" name="DAST 10 Question 3" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="698" locator="654:5-654:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="693" locator="654:11-654:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="697" locator="654:23-654:57" xsi:type="List">
                  <element localId="694" locator="654:25-654:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="695" locator="654:34-654:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="696" locator="654:45-654:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="711" locator="662:1-664:57" name="DAST 10 Question 4" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE4 DAST 10 Question 4"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Have you had blackouts or flashbacks as a result of drug use?"/>
            <a:s r="711">
               <a:s>/*
  @dataElement: NACHC.H2.DE4 DAST 10 Question 4
  @activity: NACHC.H2 DAST 10
  @description: Have you had blackouts or flashbacks as a result of drug use?
*/
define &quot;DAST 10 Question 4&quot;:
  </a:s>
               <a:s r="710">
                  <a:s>
                     <a:s r="702">
                        <a:s r="701">
                           <a:s r="701">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Question 4&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="709">
                     <a:s>where </a:s>
                     <a:s r="709">
                        <a:s r="704">
                           <a:s r="703">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="704">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="708">
                           <a:s>{ </a:s>
                           <a:s r="705">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="706">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="707">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="710" locator="663:3-664:57" xsi:type="Query">
            <source localId="702" locator="663:3-663:42" alias="O">
               <expression localId="701" locator="663:3-663:40" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="663:17-663:39" name="DAST 10 Question 4" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="709" locator="664:5-664:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="704" locator="664:11-664:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="708" locator="664:23-664:57" xsi:type="List">
                  <element localId="705" locator="664:25-664:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="706" locator="664:34-664:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="707" locator="664:45-664:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="722" locator="672:1-674:57" name="DAST 10 Question 5" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE5 DAST 10 Question 5"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Do you ever feel bad or guilty about your drug use? "/>
            <a:s r="722">
               <a:s>/*
  @dataElement: NACHC.H2.DE5 DAST 10 Question 5
  @activity: NACHC.H2 DAST 10
  @description: Do you ever feel bad or guilty about your drug use? 
*/
define &quot;DAST 10 Question 5&quot;:
  </a:s>
               <a:s r="721">
                  <a:s>
                     <a:s r="713">
                        <a:s r="712">
                           <a:s r="712">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Question 5&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="720">
                     <a:s>where </a:s>
                     <a:s r="720">
                        <a:s r="715">
                           <a:s r="714">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="715">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="719">
                           <a:s>{ </a:s>
                           <a:s r="716">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="717">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="718">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="721" locator="673:3-674:57" xsi:type="Query">
            <source localId="713" locator="673:3-673:42" alias="O">
               <expression localId="712" locator="673:3-673:40" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="673:17-673:39" name="DAST 10 Question 5" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="720" locator="674:5-674:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="715" locator="674:11-674:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="719" locator="674:23-674:57" xsi:type="List">
                  <element localId="716" locator="674:25-674:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="717" locator="674:34-674:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="718" locator="674:45-674:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="733" locator="682:1-684:57" name="DAST 10 Question 6" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE6 DAST 10 Question 6"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Does your spouse (or parents) ever complain about your involvement with drugs?"/>
            <a:s r="733">
               <a:s>/*
  @dataElement: NACHC.H2.DE6 DAST 10 Question 6
  @activity: NACHC.H2 DAST 10
  @description: Does your spouse (or parents) ever complain about your involvement with drugs?
*/
define &quot;DAST 10 Question 6&quot;:
  </a:s>
               <a:s r="732">
                  <a:s>
                     <a:s r="724">
                        <a:s r="723">
                           <a:s r="723">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Question 6&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="731">
                     <a:s>where </a:s>
                     <a:s r="731">
                        <a:s r="726">
                           <a:s r="725">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="726">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="730">
                           <a:s>{ </a:s>
                           <a:s r="727">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="728">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="729">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="732" locator="683:3-684:57" xsi:type="Query">
            <source localId="724" locator="683:3-683:42" alias="O">
               <expression localId="723" locator="683:3-683:40" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="683:17-683:39" name="DAST 10 Question 6" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="731" locator="684:5-684:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="726" locator="684:11-684:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="730" locator="684:23-684:57" xsi:type="List">
                  <element localId="727" locator="684:25-684:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="728" locator="684:34-684:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="729" locator="684:45-684:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="744" locator="692:1-694:57" name="DAST 10 Question 7" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE7 DAST 10 Question 7"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Have you neglected your family because of your use of drugs?"/>
            <a:s r="744">
               <a:s>/*
  @dataElement: NACHC.H2.DE7 DAST 10 Question 7
  @activity: NACHC.H2 DAST 10
  @description: Have you neglected your family because of your use of drugs?
*/
define &quot;DAST 10 Question 7&quot;:
  </a:s>
               <a:s r="743">
                  <a:s>
                     <a:s r="735">
                        <a:s r="734">
                           <a:s r="734">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Question 7&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="742">
                     <a:s>where </a:s>
                     <a:s r="742">
                        <a:s r="737">
                           <a:s r="736">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="737">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="741">
                           <a:s>{ </a:s>
                           <a:s r="738">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="739">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="740">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="743" locator="693:3-694:57" xsi:type="Query">
            <source localId="735" locator="693:3-693:42" alias="O">
               <expression localId="734" locator="693:3-693:40" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="693:17-693:39" name="DAST 10 Question 7" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="742" locator="694:5-694:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="737" locator="694:11-694:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="741" locator="694:23-694:57" xsi:type="List">
                  <element localId="738" locator="694:25-694:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="739" locator="694:34-694:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="740" locator="694:45-694:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="755" locator="702:1-704:57" name="DAST 10 Question 8" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE8 DAST 10 Question 8"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Have you engaged in illegal activities in order to obtain drugs?"/>
            <a:s r="755">
               <a:s>/*
  @dataElement: NACHC.H2.DE8 DAST 10 Question 8
  @activity: NACHC.H2 DAST 10
  @description: Have you engaged in illegal activities in order to obtain drugs?
*/
define &quot;DAST 10 Question 8&quot;:
  </a:s>
               <a:s r="754">
                  <a:s>
                     <a:s r="746">
                        <a:s r="745">
                           <a:s r="745">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Question 8&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="753">
                     <a:s>where </a:s>
                     <a:s r="753">
                        <a:s r="748">
                           <a:s r="747">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="748">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="752">
                           <a:s>{ </a:s>
                           <a:s r="749">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="750">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="751">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="754" locator="703:3-704:57" xsi:type="Query">
            <source localId="746" locator="703:3-703:42" alias="O">
               <expression localId="745" locator="703:3-703:40" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="703:17-703:39" name="DAST 10 Question 8" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="753" locator="704:5-704:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="748" locator="704:11-704:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="752" locator="704:23-704:57" xsi:type="List">
                  <element localId="749" locator="704:25-704:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="750" locator="704:34-704:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="751" locator="704:45-704:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="766" locator="712:1-714:57" name="DAST 10 Question 9" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE9 DAST 10 Question 9"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Have you ever experienced withdrawal symptoms (felt sick) when you stopped taking drugs?"/>
            <a:s r="766">
               <a:s>/*
  @dataElement: NACHC.H2.DE9 DAST 10 Question 9
  @activity: NACHC.H2 DAST 10
  @description: Have you ever experienced withdrawal symptoms (felt sick) when you stopped taking drugs?
*/
define &quot;DAST 10 Question 9&quot;:
  </a:s>
               <a:s r="765">
                  <a:s>
                     <a:s r="757">
                        <a:s r="756">
                           <a:s r="756">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Question 9&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="764">
                     <a:s>where </a:s>
                     <a:s r="764">
                        <a:s r="759">
                           <a:s r="758">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="759">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="763">
                           <a:s>{ </a:s>
                           <a:s r="760">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="761">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="762">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="765" locator="713:3-714:57" xsi:type="Query">
            <source localId="757" locator="713:3-713:42" alias="O">
               <expression localId="756" locator="713:3-713:40" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="713:17-713:39" name="DAST 10 Question 9" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="764" locator="714:5-714:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="759" locator="714:11-714:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="763" locator="714:23-714:57" xsi:type="List">
                  <element localId="760" locator="714:25-714:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="761" locator="714:34-714:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="762" locator="714:45-714:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
      <def localId="777" locator="722:1-724:57" name="DAST 10 Score" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:t name="dataElement" value="NACHC.H2.DE11 DAST 10 Score"/>
            <a:t name="activity" value="NACHC.H2 DAST 10"/>
            <a:t name="description" value="Substance Abuse Prescription Illicit Substance Over the Counter Product Screening Test Score"/>
            <a:s r="777">
               <a:s>/*
  @dataElement: NACHC.H2.DE11 DAST 10 Score
  @activity: NACHC.H2 DAST 10
  @description: Substance Abuse Prescription Illicit Substance Over the Counter Product Screening Test Score
*/
define &quot;DAST 10 Score&quot;:
  </a:s>
               <a:s r="776">
                  <a:s>
                     <a:s r="768">
                        <a:s r="767">
                           <a:s r="767">
                              <a:s>[Observation: </a:s>
                              <a:s>
                                 <a:s>Cx.&quot;DAST 10 Score&quot;</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s> O</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
    </a:s>
                  <a:s r="775">
                     <a:s>where </a:s>
                     <a:s r="775">
                        <a:s r="770">
                           <a:s r="769">
                              <a:s>O</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="770">
                              <a:s>status</a:s>
                           </a:s>
                        </a:s>
                        <a:s> in </a:s>
                        <a:s r="774">
                           <a:s>{ </a:s>
                           <a:s r="771">
                              <a:s>'final'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="772">
                              <a:s>'amended'</a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="773">
                              <a:s>'corrected'</a:s>
                           </a:s>
                           <a:s> }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="776" locator="723:3-724:57" xsi:type="Query">
            <source localId="768" locator="723:3-723:37" alias="O">
               <expression localId="767" locator="723:3-723:35" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="~" xsi:type="Retrieve">
                  <codes xsi:type="ToList">
                     <operand locator="723:17-723:34" name="DAST 10 Score" libraryName="Cx" xsi:type="CodeRef"/>
                  </codes>
               </expression>
            </source>
            <where localId="775" locator="724:5-724:57" xsi:type="In">
               <operand name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="770" locator="724:11-724:18" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="774" locator="724:23-724:57" xsi:type="List">
                  <element localId="771" locator="724:25-724:31" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="772" locator="724:34-724:42" valueType="t:String" value="amended" xsi:type="Literal"/>
                  <element localId="773" locator="724:45-724:55" valueType="t:String" value="corrected" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
      </def>
   </statements>
</library>
"
  } ]
}
